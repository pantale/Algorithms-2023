C **********************************************************************
C Function to compute the ANN : 3Cr2Mo-3-17-9-1-swish yield stress
C **********************************************************************
      subroutine vuhard (
C Read only -
     +  nblock, nElement, nIntPt, nLayer, nSecPt, lAnneal, stepTime,
     +  totalTime, dt, cmname, nstatev, nfieldv, nprops, props,
     +  tempOld, tempNew, fieldOld, fieldNew, stateOld, eqps, eqpsRate,
C Write only -
     +  yield, dyieldDtemp, dyieldDeqps, stateNew)
C
      include 'vaba_param.inc'
C
      dimension nElement(nblock), props(nprops), tempOld(nblock),
     +  fieldOld(nblock,nfieldv), stateOld(nblock,nstatev),
     +  tempNew(nblock), fieldNew(nblock,nfieldv), eqps(nblock),
     +  eqpsRate(nblock), yield(nblock), dyieldDtemp(nblock),
     +  dyieldDeqps(nblock,2), stateNew(nblock,nstatev)
C
      character*80 cmname
C Block of Data
      double precision w1(17, 3)
      data w1/-299.1039644071783528D0,
     + 0.6680146290966757D0,
     + 0.8361666672261184D0,
     + 1.9241000675814408D0,
     + -45.4810458517903129D0,
     + 0.7516586609065663D0,
     + -14.3478100163619935D0,
     + -0.5171214089175289D0,
     + 0.8772117691345511D0,
     + -4.2805070795913576D0,
     + -2.1657325028086283D0,
     + -0.4890625751448741D0,
     + -0.1373172483433412D0,
     + -3.8454903597100145D0,
     + -1.0554530208649384D0,
     + 1.2005636317977726D0,
     + -0.4668436312717759D0,
     + 0.4637678077196684D0,
     + -0.1967501581969909D0,
     + 4.6536865255888582D0,
     + -1.5376599458940221D0,
     + -0.0549157177626931D0,
     + -5.5041495121484267D0,
     + 0.6548317140456689D0,
     + -3.4488956435890388D0,
     + 2.9576362295298151D0,
     + 0.8527643550920205D0,
     + 7.4048031522289035D0,
     + -1.0643611777388187D0,
     + 8.6216068918622994D0,
     + -1.5128451728253165D0,
     + -2.7065058268320135D0,
     + -4.1108144203364967D0,
     + -0.2277986928215602D0,
     + -0.6050186750642161D0,
     + 3.8051932086572D0,
     + -33.9333674844007263D0,
     + 0.2526202910741559D0,
     + 0.1199916464499112D0,
     + 0.2182963428741995D0,
     + -0.3095611943312264D0,
     + 4.6617461154202919D0,
     + -1.5753565040307356D0,
     + -0.2543295631510638D0,
     + 0.3279435497521669D0,
     + -7.8479103560877546D0,
     + 1.9315635647712954D0,
     + 0.2973568928726071D0,
     + 1.3747474290514572D0,
     + 1.1080552432731969D0,
     + 7.0666367879308236D0/
      double precision b1(17)
      data b1/0.3051218857183425D0,
     + -3.3458774616680338D0,
     + -3.9677931222729081D0,
     + -0.4914509422625256D0,
     + 0.5664359975349632D0,
     + -0.0052598707526381D0,
     + -0.1335989544695056D0,
     + -1.5591996869566904D0,
     + -1.8135341297802419D0,
     + -0.0677768578151708D0,
     + -6.8192246039644822D0,
     + 0.657323288198054D0,
     + -9.6765175175016953D0,
     + 1.4260321608000912D0,
     + 1.6387157840389424D0,
     + 0.4097880798766956D0,
     + -6.6670901121712003D0/
      double precision w2(9, 17)
      data w2/1.1789747346800068D0,
     + -0.2805455509061474D0,
     + 0.0345405622208344D0,
     + -1.3358396494134834D0,
     + -1.5092822653877569D0,
     + 0.7077285669437265D0,
     + 4.1629708295820667D0,
     + 2.0616571008135907D0,
     + 7.1134153410920105D0,
     + -5.4414417201988057D0,
     + -0.1091919132416297D0,
     + 0.001145663599211D0,
     + -2.4754433282212762D0,
     + -2.396844481557296D0,
     + 0.9210988474211805D0,
     + -2.2531168360825262D0,
     + -1.7430937855135737D0,
     + -1.9297142196164669D0,
     + -2.6469401700241719D0,
     + -0.1590047383820708D0,
     + 0.0017197768856588D0,
     + -3.8949046098656623D0,
     + -3.1822736781549765D0,
     + -0.333169300351804D0,
     + 5.8482259402692458D0,
     + -1.5651825000010815D0,
     + 6.8369148851542425D0,
     + 0.3688073812790898D0,
     + 0.1028299377906524D0,
     + 0.0068647739098825D0,
     + 1.2015352956329435D0,
     + -0.9996913597592517D0,
     + -4.0327813286474647D0,
     + -0.149454936839091D0,
     + -3.1337956793371355D0,
     + 1.0416933078189141D0,
     + 0.3325754858678016D0,
     + -0.4962159272279333D0,
     + -0.0102082186111313D0,
     + -0.060497356635733D0,
     + -0.2725342953437265D0,
     + 3.7873446002975188D0,
     + 1.0620721890761859D0,
     + -0.8100715360957284D0,
     + 1.022758333036123D0,
     + 1.5896696266611108D0,
     + 0.4781844768851623D0,
     + -0.0249658241877917D0,
     + 0.8410831896679347D0,
     + 3.9836818339856763D0,
     + 2.5654184857074971D0,
     + -9.0556601547249258D0,
     + -3.4964928201758911D0,
     + -3.2693526763898553D0,
     + 0.0129003955778206D0,
     + -0.6693803692897018D0,
     + -0.0002085819088361D0,
     + -0.9669186543365711D0,
     + -1.4595118381077532D0,
     + 0.7445213844319262D0,
     + -0.9277597883687245D0,
     + -0.5259197028960046D0,
     + 0.0091959881370838D0,
     + 4.5360487098693021D0,
     + 0.0069044214920958D0,
     + 0.0312136293017983D0,
     + 0.329876291652405D0,
     + 0.7775313989010836D0,
     + 0.0890903378226599D0,
     + 2.3313376285566951D0,
     + -0.1865106417360819D0,
     + 2.1279842087419563D0,
     + -2.5971577999720923D0,
     + 1.1494887476635862D0,
     + -0.0056730855386168D0,
     + -0.9657990562037931D0,
     + 0.015339968602056D0,
     + 0.8408446898523521D0,
     + -2.8349237522831747D0,
     + 0.4908397253559022D0,
     + -3.6153833633217598D0,
     + 1.2475359649756323D0,
     + -1.7161265935578931D0,
     + -0.0414778707439408D0,
     + -2.1203562520116579D0,
     + -5.860442671564452D0,
     + -1.9243091477149834D0,
     + 4.4200486018566414D0,
     + 0.8470074848848932D0,
     + 4.5240908763162153D0,
     + 1.7203200214420842D0,
     + 0.0446431592236441D0,
     + 0.0111736958080788D0,
     + -1.3376814433588109D0,
     + -0.2309359878464192D0,
     + 0.9593924970486152D0,
     + -0.2550793631030024D0,
     + -1.8832893174540604D0,
     + -2.9832670645507231D0,
     + -3.6639199194370526D0,
     + 0.0112146080058835D0,
     + 0.0443289908326124D0,
     + -0.499196226109844D0,
     + -0.5533908447073077D0,
     + -0.919036037946422D0,
     + 9.5169989113251763D0,
     + 0.3554017812823833D0,
     + 4.6098821201893365D0,
     + -1.304163455521679D0,
     + -0.1253334872221968D0,
     + 0.0131838635873226D0,
     + 1.2274121696418705D0,
     + 1.68913990548483D0,
     + -0.2987406057285004D0,
     + -4.464673610185268D0,
     + 0.0070590844004225D0,
     + 3.2984330483317126D0,
     + -0.0300690360443304D0,
     + 0.0037763086341699D0,
     + -0.0285763651761344D0,
     + 0.2840673873352288D0,
     + 2.9857498727446727D0,
     + 2.472943656963567D0,
     + -2.8768043363186715D0,
     + -0.6752294285473892D0,
     + -1.0648032971244565D0,
     + -2.8726694377796824D0,
     + -0.5328573334008391D0,
     + -0.0104638359448847D0,
     + 0.6762483046142475D0,
     + 0.4346087163103466D0,
     + -1.1342346494069213D0,
     + -1.7155345104753821D0,
     + -1.1982715519791463D0,
     + -1.2888894114004275D0,
     + -7.8813954428141129D0,
     + -0.3380651620225344D0,
     + -0.0135010232383513D0,
     + -2.9439222399824572D0,
     + -5.6657479289671953D0,
     + -1.5335249085570426D0,
     + -2.921511869011542D0,
     + 4.0106655777505864D0,
     + -1.1791205485793597D0,
     + -0.4170468562322153D0,
     + -0.0217309665350082D0,
     + 0.0051800411869585D0,
     + 3.4512583556799692D0,
     + 2.06742591049575D0,
     + -0.5742981765160058D0,
     + -0.8385899433145205D0,
     + 3.8798209760739835D0,
     + -0.8520786765694152D0/
      double precision b2(9)
      data b2/-2.8247976132953485D0,
     + 1.1567581578694865D0,
     + -0.0045780687868912D0,
     + -1.4023896167472039D0,
     + -1.6571054378598256D0,
     + -2.340817715774457D0,
     + -3.2668687265292076D0,
     + -1.3237691794691548D0,
     + -2.1063979572320601D0/
      double precision w3(9)
      data w3/0.099450067557714D0,
     + 0.2569573635241779D0,
     + 0.0054066916402836D0,
     + 0.078240181021183D0,
     + -0.0399555387025241D0,
     + -0.1423425138362951D0,
     + 0.0692402692785699D0,
     + 0.0569201434516926D0,
     + -0.1478945047466466D0/
      double precision b3
      data b3/0.1221636530767037D0/
      double precision xmI(3)
      data xmI/0D0,
     + 0D0,
     + 1050D0/
      double precision xrI(3)
      data xrI/0.7D0,
     + 8.5171931914162382D0,
     + 200D0/
      double precision xmO
      data xmO/0.03016674D0/
      double precision xrO
      data xrO/153.709333259999994D0/
      double precision xdeps0
      data xdeps0/0.001D0/
C Do the main loop for all block values
      do k = 1, nblock
C Preprocessing of the variables
      xeps = (eqps(k) - xmI(1))/xrI(1)
      if (eqpsRate(k) > xdeps0) then
        xdeps = (log(eqpsRate(k)/xdeps0) - xmI(2))/xrI(2)
      else
        xdeps = 0
        eqpsRate(k) = xdeps0
      endif
      xtemp = (tempNew(k) - xmI(3))/xrI(3)
C Hidden layer #1 - (y11 to y117)
      y11 = w1(1,1) * xeps
     + +w1(1,2) * xdeps
     + +w1(1,3) * xtemp
     + +b1(1)
      y12 = w1(2,1) * xeps
     + +w1(2,2) * xdeps
     + +w1(2,3) * xtemp
     + +b1(2)
      y13 = w1(3,1) * xeps
     + +w1(3,2) * xdeps
     + +w1(3,3) * xtemp
     + +b1(3)
      y14 = w1(4,1) * xeps
     + +w1(4,2) * xdeps
     + +w1(4,3) * xtemp
     + +b1(4)
      y15 = w1(5,1) * xeps
     + +w1(5,2) * xdeps
     + +w1(5,3) * xtemp
     + +b1(5)
      y16 = w1(6,1) * xeps
     + +w1(6,2) * xdeps
     + +w1(6,3) * xtemp
     + +b1(6)
      y17 = w1(7,1) * xeps
     + +w1(7,2) * xdeps
     + +w1(7,3) * xtemp
     + +b1(7)
      y18 = w1(8,1) * xeps
     + +w1(8,2) * xdeps
     + +w1(8,3) * xtemp
     + +b1(8)
      y19 = w1(9,1) * xeps
     + +w1(9,2) * xdeps
     + +w1(9,3) * xtemp
     + +b1(9)
      y110 = w1(10,1) * xeps
     + +w1(10,2) * xdeps
     + +w1(10,3) * xtemp
     + +b1(10)
      y111 = w1(11,1) * xeps
     + +w1(11,2) * xdeps
     + +w1(11,3) * xtemp
     + +b1(11)
      y112 = w1(12,1) * xeps
     + +w1(12,2) * xdeps
     + +w1(12,3) * xtemp
     + +b1(12)
      y113 = w1(13,1) * xeps
     + +w1(13,2) * xdeps
     + +w1(13,3) * xtemp
     + +b1(13)
      y114 = w1(14,1) * xeps
     + +w1(14,2) * xdeps
     + +w1(14,3) * xtemp
     + +b1(14)
      y115 = w1(15,1) * xeps
     + +w1(15,2) * xdeps
     + +w1(15,3) * xtemp
     + +b1(15)
      y116 = w1(16,1) * xeps
     + +w1(16,2) * xdeps
     + +w1(16,3) * xtemp
     + +b1(16)
      y117 = w1(17,1) * xeps
     + +w1(17,2) * xdeps
     + +w1(17,3) * xtemp
     + +b1(17)
C swish activation function - (yf11 to yf117)
      yf11 = y11/(1 + exp(-y11))
      yf12 = y12/(1 + exp(-y12))
      yf13 = y13/(1 + exp(-y13))
      yf14 = y14/(1 + exp(-y14))
      yf15 = y15/(1 + exp(-y15))
      yf16 = y16/(1 + exp(-y16))
      yf17 = y17/(1 + exp(-y17))
      yf18 = y18/(1 + exp(-y18))
      yf19 = y19/(1 + exp(-y19))
      yf110 = y110/(1 + exp(-y110))
      yf111 = y111/(1 + exp(-y111))
      yf112 = y112/(1 + exp(-y112))
      yf113 = y113/(1 + exp(-y113))
      yf114 = y114/(1 + exp(-y114))
      yf115 = y115/(1 + exp(-y115))
      yf116 = y116/(1 + exp(-y116))
      yf117 = y117/(1 + exp(-y117))
C Hidden layer #2 - (y21 to y29)
      y21 = w2(1,1) * yf11
     + +w2(1,2) * yf12
     + +w2(1,3) * yf13
     + +w2(1,4) * yf14
     + +w2(1,5) * yf15
     + +w2(1,6) * yf16
     + +w2(1,7) * yf17
     + +w2(1,8) * yf18
     + +w2(1,9) * yf19
     + +w2(1,10) * yf110
     + +w2(1,11) * yf111
     + +w2(1,12) * yf112
     + +w2(1,13) * yf113
     + +w2(1,14) * yf114
     + +w2(1,15) * yf115
     + +w2(1,16) * yf116
     + +w2(1,17) * yf117
     + +b2(1)
      y22 = w2(2,1) * yf11
     + +w2(2,2) * yf12
     + +w2(2,3) * yf13
     + +w2(2,4) * yf14
     + +w2(2,5) * yf15
     + +w2(2,6) * yf16
     + +w2(2,7) * yf17
     + +w2(2,8) * yf18
     + +w2(2,9) * yf19
     + +w2(2,10) * yf110
     + +w2(2,11) * yf111
     + +w2(2,12) * yf112
     + +w2(2,13) * yf113
     + +w2(2,14) * yf114
     + +w2(2,15) * yf115
     + +w2(2,16) * yf116
     + +w2(2,17) * yf117
     + +b2(2)
      y23 = w2(3,1) * yf11
     + +w2(3,2) * yf12
     + +w2(3,3) * yf13
     + +w2(3,4) * yf14
     + +w2(3,5) * yf15
     + +w2(3,6) * yf16
     + +w2(3,7) * yf17
     + +w2(3,8) * yf18
     + +w2(3,9) * yf19
     + +w2(3,10) * yf110
     + +w2(3,11) * yf111
     + +w2(3,12) * yf112
     + +w2(3,13) * yf113
     + +w2(3,14) * yf114
     + +w2(3,15) * yf115
     + +w2(3,16) * yf116
     + +w2(3,17) * yf117
     + +b2(3)
      y24 = w2(4,1) * yf11
     + +w2(4,2) * yf12
     + +w2(4,3) * yf13
     + +w2(4,4) * yf14
     + +w2(4,5) * yf15
     + +w2(4,6) * yf16
     + +w2(4,7) * yf17
     + +w2(4,8) * yf18
     + +w2(4,9) * yf19
     + +w2(4,10) * yf110
     + +w2(4,11) * yf111
     + +w2(4,12) * yf112
     + +w2(4,13) * yf113
     + +w2(4,14) * yf114
     + +w2(4,15) * yf115
     + +w2(4,16) * yf116
     + +w2(4,17) * yf117
     + +b2(4)
      y25 = w2(5,1) * yf11
     + +w2(5,2) * yf12
     + +w2(5,3) * yf13
     + +w2(5,4) * yf14
     + +w2(5,5) * yf15
     + +w2(5,6) * yf16
     + +w2(5,7) * yf17
     + +w2(5,8) * yf18
     + +w2(5,9) * yf19
     + +w2(5,10) * yf110
     + +w2(5,11) * yf111
     + +w2(5,12) * yf112
     + +w2(5,13) * yf113
     + +w2(5,14) * yf114
     + +w2(5,15) * yf115
     + +w2(5,16) * yf116
     + +w2(5,17) * yf117
     + +b2(5)
      y26 = w2(6,1) * yf11
     + +w2(6,2) * yf12
     + +w2(6,3) * yf13
     + +w2(6,4) * yf14
     + +w2(6,5) * yf15
     + +w2(6,6) * yf16
     + +w2(6,7) * yf17
     + +w2(6,8) * yf18
     + +w2(6,9) * yf19
     + +w2(6,10) * yf110
     + +w2(6,11) * yf111
     + +w2(6,12) * yf112
     + +w2(6,13) * yf113
     + +w2(6,14) * yf114
     + +w2(6,15) * yf115
     + +w2(6,16) * yf116
     + +w2(6,17) * yf117
     + +b2(6)
      y27 = w2(7,1) * yf11
     + +w2(7,2) * yf12
     + +w2(7,3) * yf13
     + +w2(7,4) * yf14
     + +w2(7,5) * yf15
     + +w2(7,6) * yf16
     + +w2(7,7) * yf17
     + +w2(7,8) * yf18
     + +w2(7,9) * yf19
     + +w2(7,10) * yf110
     + +w2(7,11) * yf111
     + +w2(7,12) * yf112
     + +w2(7,13) * yf113
     + +w2(7,14) * yf114
     + +w2(7,15) * yf115
     + +w2(7,16) * yf116
     + +w2(7,17) * yf117
     + +b2(7)
      y28 = w2(8,1) * yf11
     + +w2(8,2) * yf12
     + +w2(8,3) * yf13
     + +w2(8,4) * yf14
     + +w2(8,5) * yf15
     + +w2(8,6) * yf16
     + +w2(8,7) * yf17
     + +w2(8,8) * yf18
     + +w2(8,9) * yf19
     + +w2(8,10) * yf110
     + +w2(8,11) * yf111
     + +w2(8,12) * yf112
     + +w2(8,13) * yf113
     + +w2(8,14) * yf114
     + +w2(8,15) * yf115
     + +w2(8,16) * yf116
     + +w2(8,17) * yf117
     + +b2(8)
      y29 = w2(9,1) * yf11
     + +w2(9,2) * yf12
     + +w2(9,3) * yf13
     + +w2(9,4) * yf14
     + +w2(9,5) * yf15
     + +w2(9,6) * yf16
     + +w2(9,7) * yf17
     + +w2(9,8) * yf18
     + +w2(9,9) * yf19
     + +w2(9,10) * yf110
     + +w2(9,11) * yf111
     + +w2(9,12) * yf112
     + +w2(9,13) * yf113
     + +w2(9,14) * yf114
     + +w2(9,15) * yf115
     + +w2(9,16) * yf116
     + +w2(9,17) * yf117
     + +b2(9)
C swish activation function - (yf21 to yf29)
      yf21 = y21/(1 + exp(-y21))
      yf22 = y22/(1 + exp(-y22))
      yf23 = y23/(1 + exp(-y23))
      yf24 = y24/(1 + exp(-y24))
      yf25 = y25/(1 + exp(-y25))
      yf26 = y26/(1 + exp(-y26))
      yf27 = y27/(1 + exp(-y27))
      yf28 = y28/(1 + exp(-y28))
      yf29 = y29/(1 + exp(-y29))
C Derivatives terms - (xa1 to xa9) and (xb1 to xb17)
      xa1 = w3(1) * (yf21 + (1 - yf21)/(1 + exp(-y21)))
      xa2 = w3(2) * (yf22 + (1 - yf22)/(1 + exp(-y22)))
      xa3 = w3(3) * (yf23 + (1 - yf23)/(1 + exp(-y23)))
      xa4 = w3(4) * (yf24 + (1 - yf24)/(1 + exp(-y24)))
      xa5 = w3(5) * (yf25 + (1 - yf25)/(1 + exp(-y25)))
      xa6 = w3(6) * (yf26 + (1 - yf26)/(1 + exp(-y26)))
      xa7 = w3(7) * (yf27 + (1 - yf27)/(1 + exp(-y27)))
      xa8 = w3(8) * (yf28 + (1 - yf28)/(1 + exp(-y28)))
      xa9 = w3(9) * (yf29 + (1 - yf29)/(1 + exp(-y29)))
      xb1 = (w2(1,1) * xa1
     + +w2(2,1) * xa2
     + +w2(3,1) * xa3
     + +w2(4,1) * xa4
     + +w2(5,1) * xa5
     + +w2(6,1) * xa6
     + +w2(7,1) * xa7
     + +w2(8,1) * xa8
     + +w2(9,1) * xa9)
     + * (yf11 + (1 - yf11)/(1 + exp(-y11)))
      xb2 = (w2(1,2) * xa1
     + +w2(2,2) * xa2
     + +w2(3,2) * xa3
     + +w2(4,2) * xa4
     + +w2(5,2) * xa5
     + +w2(6,2) * xa6
     + +w2(7,2) * xa7
     + +w2(8,2) * xa8
     + +w2(9,2) * xa9)
     + * (yf12 + (1 - yf12)/(1 + exp(-y12)))
      xb3 = (w2(1,3) * xa1
     + +w2(2,3) * xa2
     + +w2(3,3) * xa3
     + +w2(4,3) * xa4
     + +w2(5,3) * xa5
     + +w2(6,3) * xa6
     + +w2(7,3) * xa7
     + +w2(8,3) * xa8
     + +w2(9,3) * xa9)
     + * (yf13 + (1 - yf13)/(1 + exp(-y13)))
      xb4 = (w2(1,4) * xa1
     + +w2(2,4) * xa2
     + +w2(3,4) * xa3
     + +w2(4,4) * xa4
     + +w2(5,4) * xa5
     + +w2(6,4) * xa6
     + +w2(7,4) * xa7
     + +w2(8,4) * xa8
     + +w2(9,4) * xa9)
     + * (yf14 + (1 - yf14)/(1 + exp(-y14)))
      xb5 = (w2(1,5) * xa1
     + +w2(2,5) * xa2
     + +w2(3,5) * xa3
     + +w2(4,5) * xa4
     + +w2(5,5) * xa5
     + +w2(6,5) * xa6
     + +w2(7,5) * xa7
     + +w2(8,5) * xa8
     + +w2(9,5) * xa9)
     + * (yf15 + (1 - yf15)/(1 + exp(-y15)))
      xb6 = (w2(1,6) * xa1
     + +w2(2,6) * xa2
     + +w2(3,6) * xa3
     + +w2(4,6) * xa4
     + +w2(5,6) * xa5
     + +w2(6,6) * xa6
     + +w2(7,6) * xa7
     + +w2(8,6) * xa8
     + +w2(9,6) * xa9)
     + * (yf16 + (1 - yf16)/(1 + exp(-y16)))
      xb7 = (w2(1,7) * xa1
     + +w2(2,7) * xa2
     + +w2(3,7) * xa3
     + +w2(4,7) * xa4
     + +w2(5,7) * xa5
     + +w2(6,7) * xa6
     + +w2(7,7) * xa7
     + +w2(8,7) * xa8
     + +w2(9,7) * xa9)
     + * (yf17 + (1 - yf17)/(1 + exp(-y17)))
      xb8 = (w2(1,8) * xa1
     + +w2(2,8) * xa2
     + +w2(3,8) * xa3
     + +w2(4,8) * xa4
     + +w2(5,8) * xa5
     + +w2(6,8) * xa6
     + +w2(7,8) * xa7
     + +w2(8,8) * xa8
     + +w2(9,8) * xa9)
     + * (yf18 + (1 - yf18)/(1 + exp(-y18)))
      xb9 = (w2(1,9) * xa1
     + +w2(2,9) * xa2
     + +w2(3,9) * xa3
     + +w2(4,9) * xa4
     + +w2(5,9) * xa5
     + +w2(6,9) * xa6
     + +w2(7,9) * xa7
     + +w2(8,9) * xa8
     + +w2(9,9) * xa9)
     + * (yf19 + (1 - yf19)/(1 + exp(-y19)))
      xb10 = (w2(1,10) * xa1
     + +w2(2,10) * xa2
     + +w2(3,10) * xa3
     + +w2(4,10) * xa4
     + +w2(5,10) * xa5
     + +w2(6,10) * xa6
     + +w2(7,10) * xa7
     + +w2(8,10) * xa8
     + +w2(9,10) * xa9)
     + * (yf110 + (1 - yf110)/(1 + exp(-y110)))
      xb11 = (w2(1,11) * xa1
     + +w2(2,11) * xa2
     + +w2(3,11) * xa3
     + +w2(4,11) * xa4
     + +w2(5,11) * xa5
     + +w2(6,11) * xa6
     + +w2(7,11) * xa7
     + +w2(8,11) * xa8
     + +w2(9,11) * xa9)
     + * (yf111 + (1 - yf111)/(1 + exp(-y111)))
      xb12 = (w2(1,12) * xa1
     + +w2(2,12) * xa2
     + +w2(3,12) * xa3
     + +w2(4,12) * xa4
     + +w2(5,12) * xa5
     + +w2(6,12) * xa6
     + +w2(7,12) * xa7
     + +w2(8,12) * xa8
     + +w2(9,12) * xa9)
     + * (yf112 + (1 - yf112)/(1 + exp(-y112)))
      xb13 = (w2(1,13) * xa1
     + +w2(2,13) * xa2
     + +w2(3,13) * xa3
     + +w2(4,13) * xa4
     + +w2(5,13) * xa5
     + +w2(6,13) * xa6
     + +w2(7,13) * xa7
     + +w2(8,13) * xa8
     + +w2(9,13) * xa9)
     + * (yf113 + (1 - yf113)/(1 + exp(-y113)))
      xb14 = (w2(1,14) * xa1
     + +w2(2,14) * xa2
     + +w2(3,14) * xa3
     + +w2(4,14) * xa4
     + +w2(5,14) * xa5
     + +w2(6,14) * xa6
     + +w2(7,14) * xa7
     + +w2(8,14) * xa8
     + +w2(9,14) * xa9)
     + * (yf114 + (1 - yf114)/(1 + exp(-y114)))
      xb15 = (w2(1,15) * xa1
     + +w2(2,15) * xa2
     + +w2(3,15) * xa3
     + +w2(4,15) * xa4
     + +w2(5,15) * xa5
     + +w2(6,15) * xa6
     + +w2(7,15) * xa7
     + +w2(8,15) * xa8
     + +w2(9,15) * xa9)
     + * (yf115 + (1 - yf115)/(1 + exp(-y115)))
      xb16 = (w2(1,16) * xa1
     + +w2(2,16) * xa2
     + +w2(3,16) * xa3
     + +w2(4,16) * xa4
     + +w2(5,16) * xa5
     + +w2(6,16) * xa6
     + +w2(7,16) * xa7
     + +w2(8,16) * xa8
     + +w2(9,16) * xa9)
     + * (yf116 + (1 - yf116)/(1 + exp(-y116)))
      xb17 = (w2(1,17) * xa1
     + +w2(2,17) * xa2
     + +w2(3,17) * xa3
     + +w2(4,17) * xa4
     + +w2(5,17) * xa5
     + +w2(6,17) * xa6
     + +w2(7,17) * xa7
     + +w2(8,17) * xa8
     + +w2(9,17) * xa9)
     + * (yf117 + (1 - yf117)/(1 + exp(-y117)))
C Outputs of the subroutine
      Yield(k) = xrO * (w3(1) * yf21
     + +w3(2) * yf22
     + +w3(3) * yf23
     + +w3(4) * yf24
     + +w3(5) * yf25
     + +w3(6) * yf26
     + +w3(7) * yf27
     + +w3(8) * yf28
     + +w3(9) * yf29
     + +b3)
     + +xmO
      dyieldDeqps(k,1) = xrO * (w1(1,1) * xb1
     + +w1(2,1) * xb2
     + +w1(3,1) * xb3
     + +w1(4,1) * xb4
     + +w1(5,1) * xb5
     + +w1(6,1) * xb6
     + +w1(7,1) * xb7
     + +w1(8,1) * xb8
     + +w1(9,1) * xb9
     + +w1(10,1) * xb10
     + +w1(11,1) * xb11
     + +w1(12,1) * xb12
     + +w1(13,1) * xb13
     + +w1(14,1) * xb14
     + +w1(15,1) * xb15
     + +w1(16,1) * xb16
     + +w1(17,1) * xb17) / xrI(1)
      dyieldDeqps(k,2) = xrO * (w1(1,2) * xb1
     + +w1(2,2) * xb2
     + +w1(3,2) * xb3
     + +w1(4,2) * xb4
     + +w1(5,2) * xb5
     + +w1(6,2) * xb6
     + +w1(7,2) * xb7
     + +w1(8,2) * xb8
     + +w1(9,2) * xb9
     + +w1(10,2) * xb10
     + +w1(11,2) * xb11
     + +w1(12,2) * xb12
     + +w1(13,2) * xb13
     + +w1(14,2) * xb14
     + +w1(15,2) * xb15
     + +w1(16,2) * xb16
     + +w1(17,2) * xb17)
     + /(xrI(2)*eqpsRate(k))
      dyieldDtemp(k) = xrO * (w1(1,3) * xb1
     + +w1(2,3) * xb2
     + +w1(3,3) * xb3
     + +w1(4,3) * xb4
     + +w1(5,3) * xb5
     + +w1(6,3) * xb6
     + +w1(7,3) * xb7
     + +w1(8,3) * xb8
     + +w1(9,3) * xb9
     + +w1(10,3) * xb10
     + +w1(11,3) * xb11
     + +w1(12,3) * xb12
     + +w1(13,3) * xb13
     + +w1(14,3) * xb14
     + +w1(15,3) * xb15
     + +w1(16,3) * xb16
     + +w1(17,3) * xb17) / xrI(3)
C Store the eqpsRate into stateNew variable 1
      stateNew(k,1) = eqpsRate(k)
      end do
C Return from the VUHARD subroutine
      return
      end
