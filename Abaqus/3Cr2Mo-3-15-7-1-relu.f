C **********************************************************************
C Function to compute the ANN : 3Cr2Mo-3-15-7-1-relu yield stress
C **********************************************************************
      subroutine vuhard (
C Read only -
     +  nblock, nElement, nIntPt, nLayer, nSecPt, lAnneal, stepTime,
     +  totalTime, dt, cmname, nstatev, nfieldv, nprops, props,
     +  tempOld, tempNew, fieldOld, fieldNew, stateOld, eqps, eqpsRate,
C Write only -
     +  yield, dyieldDtemp, dyieldDeqps, stateNew)
C
      include 'vaba_param.inc'
C
      dimension nElement(nblock), props(nprops), tempOld(nblock),
     +  fieldOld(nblock,nfieldv), stateOld(nblock,nstatev),
     +  tempNew(nblock), fieldNew(nblock,nfieldv), eqps(nblock),
     +  eqpsRate(nblock), yield(nblock), dyieldDtemp(nblock),
     +  dyieldDeqps(nblock,2), stateNew(nblock,nstatev)
C
      character*80 cmname
C Block of Data
      double precision w1(15, 3)
      data w1/-0.3324206048885255D0,
     + 0.5469718034600287D0,
     + 0.0350650660504515D0,
     + -56.0242232282785224D0,
     + 0.0359261156524344D0,
     + 1.4312211614641583D0,
     + -0.1302158875071548D0,
     + 0.1318306216416516D0,
     + -0.2494552364859673D0,
     + -0.5731502030542414D0,
     + 1.8545365266802787D0,
     + 0.6462457544386148D0,
     + 0.4126981243027992D0,
     + -3.4659403025921707D0,
     + 1.2197051367158314D0,
     + -0.2779782328099391D0,
     + -1.5671699370707806D0,
     + 1.589301197075657D0,
     + 2.1248995439590521D0,
     + 1.326538136448363D0,
     + 1.0206085983387618D0,
     + 1.3285408739263269D0,
     + 0.9534173732938042D0,
     + -0.0395217962717664D0,
     + 0.7478928687893724D0,
     + 0.9129092256966391D0,
     + -0.7893820856408579D0,
     + -0.6960001215621319D0,
     + 0.7736142710817249D0,
     + -1.2372514584960914D0,
     + -0.0849416437666861D0,
     + -2.4005532061712067D0,
     + -0.7631274499554438D0,
     + -1.0850305729789931D0,
     + -0.9668355088121678D0,
     + 0.3381892112050637D0,
     + -0.3198305731512299D0,
     + -1.1052108576191986D0,
     + -0.2614897623485291D0,
     + -0.208841302349455D0,
     + -0.5044726932488089D0,
     + 0.6438868318112799D0,
     + -0.5949934953415511D0,
     + -0.2026328417405734D0,
     + 0.5835905726854949D0/
      double precision b1(15)
      data b1/0D0,
     + 0.2077710505721898D0,
     + -1.193101962012397D0,
     + 0.303526795128355D0,
     + 0.2429002121318977D0,
     + -1.2127270495669924D0,
     + 0.0799663871764085D0,
     + -0.1241735892915174D0,
     + 0D0,
     + 0.3050380122581201D0,
     + 0.1215481620940735D0,
     + 0.1018881403709615D0,
     + 0.8999998172853338D0,
     + 0.6574547926610202D0,
     + -0.2760665972515284D0/
      double precision w2(7, 15)
      data w2/-0.4376764716046214D0,
     + 0.4950462032618731D0,
     + 0.5113152486211233D0,
     + -0.2417053457985855D0,
     + 0.4757466601252803D0,
     + 0.1740334595589657D0,
     + -0.2325657877982675D0,
     + -0.8235557021910288D0,
     + -0.1271453008239521D0,
     + -0.5952626783270536D0,
     + -0.4566498750975577D0,
     + 0.0427324022109034D0,
     + -2.0254573804018765D0,
     + -2.6390731943237404D0,
     + -0.7036656160226868D0,
     + -0.0725476480471256D0,
     + -1.0128872054751328D0,
     + 0.1821471903769535D0,
     + 0.8707436230451001D0,
     + 0.1213440225363126D0,
     + -1.2622384486611653D0,
     + -0.0775250149640965D0,
     + -0.0155281712576487D0,
     + 0.4482458469144528D0,
     + 0.2259515819020873D0,
     + -0.434790231502231D0,
     + 3.4668223269422445D0,
     + 0.3159315748228731D0,
     + -1.0679552677759179D0,
     + -0.12844052831527D0,
     + -0.4812523698879499D0,
     + -0.5973615737272127D0,
     + 0.3519298746731389D0,
     + -1.4352807132559335D0,
     + 0.4556136943814486D0,
     + -0.8821608026441561D0,
     + 0.1356294860793165D0,
     + -1.0480014555285477D0,
     + 0.1803001951214248D0,
     + -0.1367444912888989D0,
     + 2.1968421077967011D0,
     + -0.4549002603913788D0,
     + -0.0931763170054001D0,
     + -0.0676938022585112D0,
     + 0.6147403163182037D0,
     + 0.2175295027756882D0,
     + 0.8851866155205748D0,
     + -1.2041007331250302D0,
     + -0.1837552645812836D0,
     + 1.3034528434936103D0,
     + -0.2035902520358946D0,
     + -0.2398618215858773D0,
     + -0.2985606086882895D0,
     + -0.1382469390326678D0,
     + -0.521453288242643D0,
     + 0.8679930494613965D0,
     + 0.488815946212409D0,
     + -0.1951924880329391D0,
     + -0.2489649456083211D0,
     + -0.2416598016390439D0,
     + 0.3364933372085804D0,
     + -0.3683962565536129D0,
     + -0.0904751020796768D0,
     + 0.4058789161506406D0,
     + -0.0884364679348417D0,
     + 0.8794445981687008D0,
     + -0.7192427195915247D0,
     + 0.8915388266334598D0,
     + -0.5602418581627981D0,
     + -0.8868717180541498D0,
     + 0.2407292707442978D0,
     + -0.1585192768882922D0,
     + 0.335357894081105D0,
     + 0.0503868119516598D0,
     + 0.31694510101438D0,
     + -2.2271286382362123D0,
     + 0.6723754343321765D0,
     + 0.5524653946446777D0,
     + -0.3841501670825612D0,
     + 0.1412233387383532D0,
     + 0.2292901244885663D0,
     + -0.02571593869443D0,
     + 1.1248181413237299D0,
     + -1.1721697053543942D0,
     + 0.3063575273471433D0,
     + -0.5081038358088431D0,
     + 0.2792947878468529D0,
     + -0.4003071882873029D0,
     + 0.24741891280004D0,
     + 1.0950409479142178D0,
     + -0.9748604206801956D0,
     + -0.3002605815108788D0,
     + -0.4769685182752191D0,
     + -2.0882100196116919D0,
     + 0.0073004337104193D0,
     + -1.4089281198872041D0,
     + 0.2194460922029155D0,
     + 0.1831018938364514D0,
     + -1.0371130433460873D0,
     + 0.1011999157644747D0,
     + -0.4992253065924113D0,
     + -0.5997510939415462D0,
     + -0.4444681148190315D0,
     + -1.3748242003827582D0,
     + -0.1383948920329197D0/
      double precision b2(7)
      data b2/0.7415915883975874D0,
     + 0D0,
     + 0.53938173253206D0,
     + -0.1889768893848814D0,
     + 0.5961923344079115D0,
     + -1.0295881250236554D0,
     + 0.3526355094727688D0/
      double precision w3(7)
      data w3/0.074842631951033D0,
     + -0.6945486111013092D0,
     + -0.1182775150441228D0,
     + -0.4020593249389373D0,
     + 0.2325849401123715D0,
     + -0.4017571077453295D0,
     + 0.0924960288545524D0/
      double precision b3
      data b3/-0.0135148117675039D0/
      double precision xmI(3)
      data xmI/0D0,
     + 0D0,
     + 1050D0/
      double precision xrI(3)
      data xrI/0.7D0,
     + 8.5171931914162382D0,
     + 200D0/
      double precision xmO
      data xmO/0.03016674D0/
      double precision xrO
      data xrO/153.709333259999994D0/
      double precision xdeps0
      data xdeps0/0.001D0/
C Do the main loop for all block values
      do k = 1, nblock
C Preprocessing of the variables
      xeps = (eqps(k) - xmI(1))/xrI(1)
      if (eqpsRate(k) > xdeps0) then
        xdeps = (log(eqpsRate(k)/xdeps0) - xmI(2))/xrI(2)
      else
        xdeps = 0
        eqpsRate(k) = xdeps0
      endif
      xtemp = (tempNew(k) - xmI(3))/xrI(3)
C Hidden layer #1 - (y11 to y115)
      y11 = w1(1,1) * xeps
     + +w1(1,2) * xdeps
     + +w1(1,3) * xtemp
     + +b1(1)
      y12 = w1(2,1) * xeps
     + +w1(2,2) * xdeps
     + +w1(2,3) * xtemp
     + +b1(2)
      y13 = w1(3,1) * xeps
     + +w1(3,2) * xdeps
     + +w1(3,3) * xtemp
     + +b1(3)
      y14 = w1(4,1) * xeps
     + +w1(4,2) * xdeps
     + +w1(4,3) * xtemp
     + +b1(4)
      y15 = w1(5,1) * xeps
     + +w1(5,2) * xdeps
     + +w1(5,3) * xtemp
     + +b1(5)
      y16 = w1(6,1) * xeps
     + +w1(6,2) * xdeps
     + +w1(6,3) * xtemp
     + +b1(6)
      y17 = w1(7,1) * xeps
     + +w1(7,2) * xdeps
     + +w1(7,3) * xtemp
     + +b1(7)
      y18 = w1(8,1) * xeps
     + +w1(8,2) * xdeps
     + +w1(8,3) * xtemp
     + +b1(8)
      y19 = w1(9,1) * xeps
     + +w1(9,2) * xdeps
     + +w1(9,3) * xtemp
     + +b1(9)
      y110 = w1(10,1) * xeps
     + +w1(10,2) * xdeps
     + +w1(10,3) * xtemp
     + +b1(10)
      y111 = w1(11,1) * xeps
     + +w1(11,2) * xdeps
     + +w1(11,3) * xtemp
     + +b1(11)
      y112 = w1(12,1) * xeps
     + +w1(12,2) * xdeps
     + +w1(12,3) * xtemp
     + +b1(12)
      y113 = w1(13,1) * xeps
     + +w1(13,2) * xdeps
     + +w1(13,3) * xtemp
     + +b1(13)
      y114 = w1(14,1) * xeps
     + +w1(14,2) * xdeps
     + +w1(14,3) * xtemp
     + +b1(14)
      y115 = w1(15,1) * xeps
     + +w1(15,2) * xdeps
     + +w1(15,3) * xtemp
     + +b1(15)
C relu activation function - (yf11 to yf115)
      yf11 = (dmax1(0.0D0,y11))
      yf12 = (dmax1(0.0D0,y12))
      yf13 = (dmax1(0.0D0,y13))
      yf14 = (dmax1(0.0D0,y14))
      yf15 = (dmax1(0.0D0,y15))
      yf16 = (dmax1(0.0D0,y16))
      yf17 = (dmax1(0.0D0,y17))
      yf18 = (dmax1(0.0D0,y18))
      yf19 = (dmax1(0.0D0,y19))
      yf110 = (dmax1(0.0D0,y110))
      yf111 = (dmax1(0.0D0,y111))
      yf112 = (dmax1(0.0D0,y112))
      yf113 = (dmax1(0.0D0,y113))
      yf114 = (dmax1(0.0D0,y114))
      yf115 = (dmax1(0.0D0,y115))
C Hidden layer #2 - (y21 to y27)
      y21 = w2(1,1) * yf11
     + +w2(1,2) * yf12
     + +w2(1,3) * yf13
     + +w2(1,4) * yf14
     + +w2(1,5) * yf15
     + +w2(1,6) * yf16
     + +w2(1,7) * yf17
     + +w2(1,8) * yf18
     + +w2(1,9) * yf19
     + +w2(1,10) * yf110
     + +w2(1,11) * yf111
     + +w2(1,12) * yf112
     + +w2(1,13) * yf113
     + +w2(1,14) * yf114
     + +w2(1,15) * yf115
     + +b2(1)
      y22 = w2(2,1) * yf11
     + +w2(2,2) * yf12
     + +w2(2,3) * yf13
     + +w2(2,4) * yf14
     + +w2(2,5) * yf15
     + +w2(2,6) * yf16
     + +w2(2,7) * yf17
     + +w2(2,8) * yf18
     + +w2(2,9) * yf19
     + +w2(2,10) * yf110
     + +w2(2,11) * yf111
     + +w2(2,12) * yf112
     + +w2(2,13) * yf113
     + +w2(2,14) * yf114
     + +w2(2,15) * yf115
     + +b2(2)
      y23 = w2(3,1) * yf11
     + +w2(3,2) * yf12
     + +w2(3,3) * yf13
     + +w2(3,4) * yf14
     + +w2(3,5) * yf15
     + +w2(3,6) * yf16
     + +w2(3,7) * yf17
     + +w2(3,8) * yf18
     + +w2(3,9) * yf19
     + +w2(3,10) * yf110
     + +w2(3,11) * yf111
     + +w2(3,12) * yf112
     + +w2(3,13) * yf113
     + +w2(3,14) * yf114
     + +w2(3,15) * yf115
     + +b2(3)
      y24 = w2(4,1) * yf11
     + +w2(4,2) * yf12
     + +w2(4,3) * yf13
     + +w2(4,4) * yf14
     + +w2(4,5) * yf15
     + +w2(4,6) * yf16
     + +w2(4,7) * yf17
     + +w2(4,8) * yf18
     + +w2(4,9) * yf19
     + +w2(4,10) * yf110
     + +w2(4,11) * yf111
     + +w2(4,12) * yf112
     + +w2(4,13) * yf113
     + +w2(4,14) * yf114
     + +w2(4,15) * yf115
     + +b2(4)
      y25 = w2(5,1) * yf11
     + +w2(5,2) * yf12
     + +w2(5,3) * yf13
     + +w2(5,4) * yf14
     + +w2(5,5) * yf15
     + +w2(5,6) * yf16
     + +w2(5,7) * yf17
     + +w2(5,8) * yf18
     + +w2(5,9) * yf19
     + +w2(5,10) * yf110
     + +w2(5,11) * yf111
     + +w2(5,12) * yf112
     + +w2(5,13) * yf113
     + +w2(5,14) * yf114
     + +w2(5,15) * yf115
     + +b2(5)
      y26 = w2(6,1) * yf11
     + +w2(6,2) * yf12
     + +w2(6,3) * yf13
     + +w2(6,4) * yf14
     + +w2(6,5) * yf15
     + +w2(6,6) * yf16
     + +w2(6,7) * yf17
     + +w2(6,8) * yf18
     + +w2(6,9) * yf19
     + +w2(6,10) * yf110
     + +w2(6,11) * yf111
     + +w2(6,12) * yf112
     + +w2(6,13) * yf113
     + +w2(6,14) * yf114
     + +w2(6,15) * yf115
     + +b2(6)
      y27 = w2(7,1) * yf11
     + +w2(7,2) * yf12
     + +w2(7,3) * yf13
     + +w2(7,4) * yf14
     + +w2(7,5) * yf15
     + +w2(7,6) * yf16
     + +w2(7,7) * yf17
     + +w2(7,8) * yf18
     + +w2(7,9) * yf19
     + +w2(7,10) * yf110
     + +w2(7,11) * yf111
     + +w2(7,12) * yf112
     + +w2(7,13) * yf113
     + +w2(7,14) * yf114
     + +w2(7,15) * yf115
     + +b2(7)
C relu activation function - (yf21 to yf27)
      yf21 = (dmax1(0.0D0,y21))
      yf22 = (dmax1(0.0D0,y22))
      yf23 = (dmax1(0.0D0,y23))
      yf24 = (dmax1(0.0D0,y24))
      yf25 = (dmax1(0.0D0,y25))
      yf26 = (dmax1(0.0D0,y26))
      yf27 = (dmax1(0.0D0,y27))
C Derivatives terms - (xa1 to xa7) and (xb1 to xb15)
      xa1 = w3(1) * dmax1(0.0D0,sign(1.0D0,y21))
      xa2 = w3(2) * dmax1(0.0D0,sign(1.0D0,y22))
      xa3 = w3(3) * dmax1(0.0D0,sign(1.0D0,y23))
      xa4 = w3(4) * dmax1(0.0D0,sign(1.0D0,y24))
      xa5 = w3(5) * dmax1(0.0D0,sign(1.0D0,y25))
      xa6 = w3(6) * dmax1(0.0D0,sign(1.0D0,y26))
      xa7 = w3(7) * dmax1(0.0D0,sign(1.0D0,y27))
      xb1 = (w2(1,1) * xa1
     + +w2(2,1) * xa2
     + +w2(3,1) * xa3
     + +w2(4,1) * xa4
     + +w2(5,1) * xa5
     + +w2(6,1) * xa6
     + +w2(7,1) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y11))
      xb2 = (w2(1,2) * xa1
     + +w2(2,2) * xa2
     + +w2(3,2) * xa3
     + +w2(4,2) * xa4
     + +w2(5,2) * xa5
     + +w2(6,2) * xa6
     + +w2(7,2) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y12))
      xb3 = (w2(1,3) * xa1
     + +w2(2,3) * xa2
     + +w2(3,3) * xa3
     + +w2(4,3) * xa4
     + +w2(5,3) * xa5
     + +w2(6,3) * xa6
     + +w2(7,3) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y13))
      xb4 = (w2(1,4) * xa1
     + +w2(2,4) * xa2
     + +w2(3,4) * xa3
     + +w2(4,4) * xa4
     + +w2(5,4) * xa5
     + +w2(6,4) * xa6
     + +w2(7,4) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y14))
      xb5 = (w2(1,5) * xa1
     + +w2(2,5) * xa2
     + +w2(3,5) * xa3
     + +w2(4,5) * xa4
     + +w2(5,5) * xa5
     + +w2(6,5) * xa6
     + +w2(7,5) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y15))
      xb6 = (w2(1,6) * xa1
     + +w2(2,6) * xa2
     + +w2(3,6) * xa3
     + +w2(4,6) * xa4
     + +w2(5,6) * xa5
     + +w2(6,6) * xa6
     + +w2(7,6) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y16))
      xb7 = (w2(1,7) * xa1
     + +w2(2,7) * xa2
     + +w2(3,7) * xa3
     + +w2(4,7) * xa4
     + +w2(5,7) * xa5
     + +w2(6,7) * xa6
     + +w2(7,7) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y17))
      xb8 = (w2(1,8) * xa1
     + +w2(2,8) * xa2
     + +w2(3,8) * xa3
     + +w2(4,8) * xa4
     + +w2(5,8) * xa5
     + +w2(6,8) * xa6
     + +w2(7,8) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y18))
      xb9 = (w2(1,9) * xa1
     + +w2(2,9) * xa2
     + +w2(3,9) * xa3
     + +w2(4,9) * xa4
     + +w2(5,9) * xa5
     + +w2(6,9) * xa6
     + +w2(7,9) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y19))
      xb10 = (w2(1,10) * xa1
     + +w2(2,10) * xa2
     + +w2(3,10) * xa3
     + +w2(4,10) * xa4
     + +w2(5,10) * xa5
     + +w2(6,10) * xa6
     + +w2(7,10) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y110))
      xb11 = (w2(1,11) * xa1
     + +w2(2,11) * xa2
     + +w2(3,11) * xa3
     + +w2(4,11) * xa4
     + +w2(5,11) * xa5
     + +w2(6,11) * xa6
     + +w2(7,11) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y111))
      xb12 = (w2(1,12) * xa1
     + +w2(2,12) * xa2
     + +w2(3,12) * xa3
     + +w2(4,12) * xa4
     + +w2(5,12) * xa5
     + +w2(6,12) * xa6
     + +w2(7,12) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y112))
      xb13 = (w2(1,13) * xa1
     + +w2(2,13) * xa2
     + +w2(3,13) * xa3
     + +w2(4,13) * xa4
     + +w2(5,13) * xa5
     + +w2(6,13) * xa6
     + +w2(7,13) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y113))
      xb14 = (w2(1,14) * xa1
     + +w2(2,14) * xa2
     + +w2(3,14) * xa3
     + +w2(4,14) * xa4
     + +w2(5,14) * xa5
     + +w2(6,14) * xa6
     + +w2(7,14) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y114))
      xb15 = (w2(1,15) * xa1
     + +w2(2,15) * xa2
     + +w2(3,15) * xa3
     + +w2(4,15) * xa4
     + +w2(5,15) * xa5
     + +w2(6,15) * xa6
     + +w2(7,15) * xa7)
     + * dmax1(0.0D0,sign(1.0D0,y115))
C Outputs of the subroutine
      Yield(k) = xrO * (w3(1) * yf21
     + +w3(2) * yf22
     + +w3(3) * yf23
     + +w3(4) * yf24
     + +w3(5) * yf25
     + +w3(6) * yf26
     + +w3(7) * yf27
     + +b3)
     + +xmO
      dyieldDeqps(k,1) = xrO * (w1(1,1) * xb1
     + +w1(2,1) * xb2
     + +w1(3,1) * xb3
     + +w1(4,1) * xb4
     + +w1(5,1) * xb5
     + +w1(6,1) * xb6
     + +w1(7,1) * xb7
     + +w1(8,1) * xb8
     + +w1(9,1) * xb9
     + +w1(10,1) * xb10
     + +w1(11,1) * xb11
     + +w1(12,1) * xb12
     + +w1(13,1) * xb13
     + +w1(14,1) * xb14
     + +w1(15,1) * xb15) / xrI(1)
      dyieldDeqps(k,2) = xrO * (w1(1,2) * xb1
     + +w1(2,2) * xb2
     + +w1(3,2) * xb3
     + +w1(4,2) * xb4
     + +w1(5,2) * xb5
     + +w1(6,2) * xb6
     + +w1(7,2) * xb7
     + +w1(8,2) * xb8
     + +w1(9,2) * xb9
     + +w1(10,2) * xb10
     + +w1(11,2) * xb11
     + +w1(12,2) * xb12
     + +w1(13,2) * xb13
     + +w1(14,2) * xb14
     + +w1(15,2) * xb15)
     + /(xrI(2)*eqpsRate(k))
      dyieldDtemp(k) = xrO * (w1(1,3) * xb1
     + +w1(2,3) * xb2
     + +w1(3,3) * xb3
     + +w1(4,3) * xb4
     + +w1(5,3) * xb5
     + +w1(6,3) * xb6
     + +w1(7,3) * xb7
     + +w1(8,3) * xb8
     + +w1(9,3) * xb9
     + +w1(10,3) * xb10
     + +w1(11,3) * xb11
     + +w1(12,3) * xb12
     + +w1(13,3) * xb13
     + +w1(14,3) * xb14
     + +w1(15,3) * xb15) / xrI(3)
C Store the eqpsRate into stateNew variable 1
      stateNew(k,1) = eqpsRate(k)
      end do
C Return from the VUHARD subroutine
      return
      end
