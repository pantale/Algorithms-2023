C **********************************************************************
C Function to compute the ANN : 3Cr2Mo-3-15-7-1-softplus yield stress
C **********************************************************************
      subroutine vuhard (
C Read only -
     +  nblock, nElement, nIntPt, nLayer, nSecPt, lAnneal, stepTime,
     +  totalTime, dt, cmname, nstatev, nfieldv, nprops, props,
     +  tempOld, tempNew, fieldOld, fieldNew, stateOld, eqps, eqpsRate,
C Write only -
     +  yield, dyieldDtemp, dyieldDeqps, stateNew)
C
      include 'vaba_param.inc'
C
      dimension nElement(nblock), props(nprops), tempOld(nblock),
     +  fieldOld(nblock,nfieldv), stateOld(nblock,nstatev),
     +  tempNew(nblock), fieldNew(nblock,nfieldv), eqps(nblock),
     +  eqpsRate(nblock), yield(nblock), dyieldDtemp(nblock),
     +  dyieldDeqps(nblock,2), stateNew(nblock,nstatev)
C
      character*80 cmname
C Block of Data
      double precision w1(15, 3)
      data w1/-0.571817036407641D0,
     + -107.6204465393678618D0,
     + 1.531960593411793D0,
     + 0.5500672852478441D0,
     + -11.4130849908451548D0,
     + -1.7251014087204619D0,
     + 1.129520825905721D0,
     + 2.2912990676297307D0,
     + -0.6130559011062082D0,
     + 1.0672538980421062D0,
     + 3.4898162748448418D0,
     + 0.2140971536775368D0,
     + -3.7093633738426917D0,
     + -0.768075887599932D0,
     + 0.9072319937029784D0,
     + 0.3477989306356024D0,
     + 1.1244766824662571D0,
     + 7.441599968735698D0,
     + 1.3994388401183149D0,
     + -0.0770937867061015D0,
     + 2.6015103446753587D0,
     + -2.7285645755906036D0,
     + 2.388620853741263D0,
     + 0.1512554897787089D0,
     + 2.5151241482604147D0,
     + -4.939611350875321D0,
     + -8.7861174828963833D0,
     + -0.4395357063539684D0,
     + -3.8380489983478761D0,
     + -3.4441886855274473D0,
     + -0.7318696223002071D0,
     + -0.8006997317765494D0,
     + -7.8672617189810561D0,
     + -0.2148690335279328D0,
     + -0.5269879586271647D0,
     + -0.2012054720878267D0,
     + -1.4271569397833435D0,
     + -0.1215392943514873D0,
     + -5.1576962523137055D0,
     + -2.3485399774868356D0,
     + 1.4865913438738687D0,
     + -1.9868992129405756D0,
     + 0.4774769377311666D0,
     + -3.4292259639902261D0,
     + 1.2176259832659786D0/
      double precision b1(15)
      data b1/-0.7887079601056022D0,
     + 0.8601618784300501D0,
     + -7.2037789467315534D0,
     + 0.1430287605180728D0,
     + -0.4601165771487266D0,
     + -1.5670565915907693D0,
     + 0.1958372702377696D0,
     + -4.4446953811709928D0,
     + -0.2792916277214545D0,
     + -0.6132432432556726D0,
     + -1.4164998696992102D0,
     + 1.5868031803604186D0,
     + -0.4664944420959563D0,
     + 1.5405224961538506D0,
     + 0.763333718188817D0/
      double precision w2(7, 15)
      data w2/-0.0313244954117647D0,
     + -0.7697510474786683D0,
     + 0.4869572167558842D0,
     + -3.0681769415245213D0,
     + -0.137230825393131D0,
     + 0.2047408402351001D0,
     + 0.8830916261980118D0,
     + -0.6422961341686725D0,
     + -0.0351031213911899D0,
     + -32.1269257430806263D0,
     + 7.9410444344302551D0,
     + 1.0003996778806803D0,
     + -0.0520023690914361D0,
     + 1.3282189580487542D0,
     + -0.1592482613201482D0,
     + -41.2952258291835932D0,
     + -0.639902126908623D0,
     + 1.9426280875792268D0,
     + -2.9466324891163422D0,
     + -0.7363099248960748D0,
     + -1.8591109765981659D0,
     + 0.0546623342258711D0,
     + -1.1838470868231776D0,
     + -0.7914466122780389D0,
     + -2.7901573900571881D0,
     + -1.2586031308438019D0,
     + -0.4775681957362106D0,
     + -2.0477979942843287D0,
     + -1.942421998430284D0,
     + 1.0280897511084557D0,
     + -5.6843016712055414D0,
     + -0.3569255594964447D0,
     + -1.2358716577426487D0,
     + 1.9889482154087004D0,
     + -7.2587277391883971D0,
     + 0.0131016865371896D0,
     + -2.2016419619766978D0,
     + -0.6991531488525502D0,
     + -0.8548962488715248D0,
     + -1.1793727642691338D0,
     + 1.4633834654064493D0,
     + -3.3317793968577352D0,
     + -0.1864624690542467D0,
     + -0.0145496069322671D0,
     + -0.646781235498776D0,
     + -1.9761448511573243D0,
     + -3.846114519994599D0,
     + -2.7683919602318126D0,
     + 0.4498379236979375D0,
     + 0.8366949641707063D0,
     + 0.1497455029940386D0,
     + -1.9733556643676382D0,
     + -2.7821090469602328D0,
     + 0.6571840253706808D0,
     + -0.7576259981182559D0,
     + 0.7399156240424232D0,
     + 0.19630134368852D0,
     + -1.514051424855031D0,
     + 1.0299932683455668D0,
     + 1.081054320731532D0,
     + -1.6416997854270319D0,
     + -0.8194231812970134D0,
     + 3.4383097319300848D0,
     + 0.5803335861008518D0,
     + -0.0915354249705028D0,
     + 1.1325100858625665D0,
     + -4.3854897201175413D0,
     + 1.3924064670191056D0,
     + -1.4730539588871614D0,
     + 1.4233913495211066D0,
     + 0.1077945327903346D0,
     + 0.0293128133105782D0,
     + -5.7435713462830833D0,
     + 4.4545178069219542D0,
     + -0.6564456782865806D0,
     + 0.6928322812023828D0,
     + -10.0113909135382695D0,
     + -1.0505288801570973D0,
     + -0.0864718915910831D0,
     + 2.1490155829594726D0,
     + -0.4116144777630286D0,
     + 0.1064924930197936D0,
     + -3.8409628128009143D0,
     + -10.3621312803592343D0,
     + -0.9300310014528704D0,
     + -0.2896185208923779D0,
     + -1.9655187047255727D0,
     + -1.6621931884790799D0,
     + -0.8281754147234791D0,
     + -0.2576359249125051D0,
     + 3.0570307522626639D0,
     + 0.1730848241211291D0,
     + 0.1649357774372583D0,
     + -2.2598863945621517D0,
     + 0.9597985621990419D0,
     + 2.3151103947287583D0,
     + 3.0489587798448783D0,
     + -5.1570667721309258D0,
     + -1.5389944167254108D0,
     + 0.0993096462215264D0,
     + 1.634462923845827D0,
     + -4.4124398620938381D0,
     + 0.6710871948854199D0,
     + -0.2010233939938088D0,
     + 0.8402479422307654D0/
      double precision b2(7)
      data b2/-0.3127793440678086D0,
     + -0.4636628777571586D0,
     + -1.0189252740501793D0,
     + -3.3765071821576362D0,
     + -1.1419453780262163D0,
     + -1.697828067135646D0,
     + -0.6912176408434948D0/
      double precision w3(7)
      data w3/0.3724844996931815D0,
     + -0.8686555337868753D0,
     + 0.4920781046141544D0,
     + -1.21817986096088D0,
     + -0.353250756114553D0,
     + -0.5309331831183428D0,
     + -1.4890216692853806D0/
      double precision b3
      data b3/0.2794798395422773D0/
      double precision xmI(3)
      data xmI/0D0,
     + 0D0,
     + 1050D0/
      double precision xrI(3)
      data xrI/0.7D0,
     + 8.5171931914162382D0,
     + 200D0/
      double precision xmO
      data xmO/0.03016674D0/
      double precision xrO
      data xrO/153.709333259999994D0/
      double precision xdeps0
      data xdeps0/0.001D0/
C Do the main loop for all block values
      do k = 1, nblock
C Preprocessing of the variables
      xeps = (eqps(k) - xmI(1))/xrI(1)
      if (eqpsRate(k) > xdeps0) then
        xdeps = (log(eqpsRate(k)/xdeps0) - xmI(2))/xrI(2)
      else
        xdeps = 0
        eqpsRate(k) = xdeps0
      endif
      xtemp = (tempNew(k) - xmI(3))/xrI(3)
C Hidden layer #1 - (y11 to y115)
      y11 = w1(1,1) * xeps
     + +w1(1,2) * xdeps
     + +w1(1,3) * xtemp
     + +b1(1)
      y12 = w1(2,1) * xeps
     + +w1(2,2) * xdeps
     + +w1(2,3) * xtemp
     + +b1(2)
      y13 = w1(3,1) * xeps
     + +w1(3,2) * xdeps
     + +w1(3,3) * xtemp
     + +b1(3)
      y14 = w1(4,1) * xeps
     + +w1(4,2) * xdeps
     + +w1(4,3) * xtemp
     + +b1(4)
      y15 = w1(5,1) * xeps
     + +w1(5,2) * xdeps
     + +w1(5,3) * xtemp
     + +b1(5)
      y16 = w1(6,1) * xeps
     + +w1(6,2) * xdeps
     + +w1(6,3) * xtemp
     + +b1(6)
      y17 = w1(7,1) * xeps
     + +w1(7,2) * xdeps
     + +w1(7,3) * xtemp
     + +b1(7)
      y18 = w1(8,1) * xeps
     + +w1(8,2) * xdeps
     + +w1(8,3) * xtemp
     + +b1(8)
      y19 = w1(9,1) * xeps
     + +w1(9,2) * xdeps
     + +w1(9,3) * xtemp
     + +b1(9)
      y110 = w1(10,1) * xeps
     + +w1(10,2) * xdeps
     + +w1(10,3) * xtemp
     + +b1(10)
      y111 = w1(11,1) * xeps
     + +w1(11,2) * xdeps
     + +w1(11,3) * xtemp
     + +b1(11)
      y112 = w1(12,1) * xeps
     + +w1(12,2) * xdeps
     + +w1(12,3) * xtemp
     + +b1(12)
      y113 = w1(13,1) * xeps
     + +w1(13,2) * xdeps
     + +w1(13,3) * xtemp
     + +b1(13)
      y114 = w1(14,1) * xeps
     + +w1(14,2) * xdeps
     + +w1(14,3) * xtemp
     + +b1(14)
      y115 = w1(15,1) * xeps
     + +w1(15,2) * xdeps
     + +w1(15,3) * xtemp
     + +b1(15)
C softplus activation function - (yf11 to yf115)
      yf11 = log(1 + exp(y11))
      yf12 = log(1 + exp(y12))
      yf13 = log(1 + exp(y13))
      yf14 = log(1 + exp(y14))
      yf15 = log(1 + exp(y15))
      yf16 = log(1 + exp(y16))
      yf17 = log(1 + exp(y17))
      yf18 = log(1 + exp(y18))
      yf19 = log(1 + exp(y19))
      yf110 = log(1 + exp(y110))
      yf111 = log(1 + exp(y111))
      yf112 = log(1 + exp(y112))
      yf113 = log(1 + exp(y113))
      yf114 = log(1 + exp(y114))
      yf115 = log(1 + exp(y115))
C Hidden layer #2 - (y21 to y27)
      y21 = w2(1,1) * yf11
     + +w2(1,2) * yf12
     + +w2(1,3) * yf13
     + +w2(1,4) * yf14
     + +w2(1,5) * yf15
     + +w2(1,6) * yf16
     + +w2(1,7) * yf17
     + +w2(1,8) * yf18
     + +w2(1,9) * yf19
     + +w2(1,10) * yf110
     + +w2(1,11) * yf111
     + +w2(1,12) * yf112
     + +w2(1,13) * yf113
     + +w2(1,14) * yf114
     + +w2(1,15) * yf115
     + +b2(1)
      y22 = w2(2,1) * yf11
     + +w2(2,2) * yf12
     + +w2(2,3) * yf13
     + +w2(2,4) * yf14
     + +w2(2,5) * yf15
     + +w2(2,6) * yf16
     + +w2(2,7) * yf17
     + +w2(2,8) * yf18
     + +w2(2,9) * yf19
     + +w2(2,10) * yf110
     + +w2(2,11) * yf111
     + +w2(2,12) * yf112
     + +w2(2,13) * yf113
     + +w2(2,14) * yf114
     + +w2(2,15) * yf115
     + +b2(2)
      y23 = w2(3,1) * yf11
     + +w2(3,2) * yf12
     + +w2(3,3) * yf13
     + +w2(3,4) * yf14
     + +w2(3,5) * yf15
     + +w2(3,6) * yf16
     + +w2(3,7) * yf17
     + +w2(3,8) * yf18
     + +w2(3,9) * yf19
     + +w2(3,10) * yf110
     + +w2(3,11) * yf111
     + +w2(3,12) * yf112
     + +w2(3,13) * yf113
     + +w2(3,14) * yf114
     + +w2(3,15) * yf115
     + +b2(3)
      y24 = w2(4,1) * yf11
     + +w2(4,2) * yf12
     + +w2(4,3) * yf13
     + +w2(4,4) * yf14
     + +w2(4,5) * yf15
     + +w2(4,6) * yf16
     + +w2(4,7) * yf17
     + +w2(4,8) * yf18
     + +w2(4,9) * yf19
     + +w2(4,10) * yf110
     + +w2(4,11) * yf111
     + +w2(4,12) * yf112
     + +w2(4,13) * yf113
     + +w2(4,14) * yf114
     + +w2(4,15) * yf115
     + +b2(4)
      y25 = w2(5,1) * yf11
     + +w2(5,2) * yf12
     + +w2(5,3) * yf13
     + +w2(5,4) * yf14
     + +w2(5,5) * yf15
     + +w2(5,6) * yf16
     + +w2(5,7) * yf17
     + +w2(5,8) * yf18
     + +w2(5,9) * yf19
     + +w2(5,10) * yf110
     + +w2(5,11) * yf111
     + +w2(5,12) * yf112
     + +w2(5,13) * yf113
     + +w2(5,14) * yf114
     + +w2(5,15) * yf115
     + +b2(5)
      y26 = w2(6,1) * yf11
     + +w2(6,2) * yf12
     + +w2(6,3) * yf13
     + +w2(6,4) * yf14
     + +w2(6,5) * yf15
     + +w2(6,6) * yf16
     + +w2(6,7) * yf17
     + +w2(6,8) * yf18
     + +w2(6,9) * yf19
     + +w2(6,10) * yf110
     + +w2(6,11) * yf111
     + +w2(6,12) * yf112
     + +w2(6,13) * yf113
     + +w2(6,14) * yf114
     + +w2(6,15) * yf115
     + +b2(6)
      y27 = w2(7,1) * yf11
     + +w2(7,2) * yf12
     + +w2(7,3) * yf13
     + +w2(7,4) * yf14
     + +w2(7,5) * yf15
     + +w2(7,6) * yf16
     + +w2(7,7) * yf17
     + +w2(7,8) * yf18
     + +w2(7,9) * yf19
     + +w2(7,10) * yf110
     + +w2(7,11) * yf111
     + +w2(7,12) * yf112
     + +w2(7,13) * yf113
     + +w2(7,14) * yf114
     + +w2(7,15) * yf115
     + +b2(7)
C softplus activation function - (yf21 to yf27)
      yf21 = log(1 + exp(y21))
      yf22 = log(1 + exp(y22))
      yf23 = log(1 + exp(y23))
      yf24 = log(1 + exp(y24))
      yf25 = log(1 + exp(y25))
      yf26 = log(1 + exp(y26))
      yf27 = log(1 + exp(y27))
C Derivatives terms - (xa1 to xa7) and (xb1 to xb15)
      xa1 = w3(1) * (1/(1 + exp(-y21)))
      xa2 = w3(2) * (1/(1 + exp(-y22)))
      xa3 = w3(3) * (1/(1 + exp(-y23)))
      xa4 = w3(4) * (1/(1 + exp(-y24)))
      xa5 = w3(5) * (1/(1 + exp(-y25)))
      xa6 = w3(6) * (1/(1 + exp(-y26)))
      xa7 = w3(7) * (1/(1 + exp(-y27)))
      xb1 = (w2(1,1) * xa1
     + +w2(2,1) * xa2
     + +w2(3,1) * xa3
     + +w2(4,1) * xa4
     + +w2(5,1) * xa5
     + +w2(6,1) * xa6
     + +w2(7,1) * xa7)
     + * (1/(1 + exp(-y11)))
      xb2 = (w2(1,2) * xa1
     + +w2(2,2) * xa2
     + +w2(3,2) * xa3
     + +w2(4,2) * xa4
     + +w2(5,2) * xa5
     + +w2(6,2) * xa6
     + +w2(7,2) * xa7)
     + * (1/(1 + exp(-y12)))
      xb3 = (w2(1,3) * xa1
     + +w2(2,3) * xa2
     + +w2(3,3) * xa3
     + +w2(4,3) * xa4
     + +w2(5,3) * xa5
     + +w2(6,3) * xa6
     + +w2(7,3) * xa7)
     + * (1/(1 + exp(-y13)))
      xb4 = (w2(1,4) * xa1
     + +w2(2,4) * xa2
     + +w2(3,4) * xa3
     + +w2(4,4) * xa4
     + +w2(5,4) * xa5
     + +w2(6,4) * xa6
     + +w2(7,4) * xa7)
     + * (1/(1 + exp(-y14)))
      xb5 = (w2(1,5) * xa1
     + +w2(2,5) * xa2
     + +w2(3,5) * xa3
     + +w2(4,5) * xa4
     + +w2(5,5) * xa5
     + +w2(6,5) * xa6
     + +w2(7,5) * xa7)
     + * (1/(1 + exp(-y15)))
      xb6 = (w2(1,6) * xa1
     + +w2(2,6) * xa2
     + +w2(3,6) * xa3
     + +w2(4,6) * xa4
     + +w2(5,6) * xa5
     + +w2(6,6) * xa6
     + +w2(7,6) * xa7)
     + * (1/(1 + exp(-y16)))
      xb7 = (w2(1,7) * xa1
     + +w2(2,7) * xa2
     + +w2(3,7) * xa3
     + +w2(4,7) * xa4
     + +w2(5,7) * xa5
     + +w2(6,7) * xa6
     + +w2(7,7) * xa7)
     + * (1/(1 + exp(-y17)))
      xb8 = (w2(1,8) * xa1
     + +w2(2,8) * xa2
     + +w2(3,8) * xa3
     + +w2(4,8) * xa4
     + +w2(5,8) * xa5
     + +w2(6,8) * xa6
     + +w2(7,8) * xa7)
     + * (1/(1 + exp(-y18)))
      xb9 = (w2(1,9) * xa1
     + +w2(2,9) * xa2
     + +w2(3,9) * xa3
     + +w2(4,9) * xa4
     + +w2(5,9) * xa5
     + +w2(6,9) * xa6
     + +w2(7,9) * xa7)
     + * (1/(1 + exp(-y19)))
      xb10 = (w2(1,10) * xa1
     + +w2(2,10) * xa2
     + +w2(3,10) * xa3
     + +w2(4,10) * xa4
     + +w2(5,10) * xa5
     + +w2(6,10) * xa6
     + +w2(7,10) * xa7)
     + * (1/(1 + exp(-y110)))
      xb11 = (w2(1,11) * xa1
     + +w2(2,11) * xa2
     + +w2(3,11) * xa3
     + +w2(4,11) * xa4
     + +w2(5,11) * xa5
     + +w2(6,11) * xa6
     + +w2(7,11) * xa7)
     + * (1/(1 + exp(-y111)))
      xb12 = (w2(1,12) * xa1
     + +w2(2,12) * xa2
     + +w2(3,12) * xa3
     + +w2(4,12) * xa4
     + +w2(5,12) * xa5
     + +w2(6,12) * xa6
     + +w2(7,12) * xa7)
     + * (1/(1 + exp(-y112)))
      xb13 = (w2(1,13) * xa1
     + +w2(2,13) * xa2
     + +w2(3,13) * xa3
     + +w2(4,13) * xa4
     + +w2(5,13) * xa5
     + +w2(6,13) * xa6
     + +w2(7,13) * xa7)
     + * (1/(1 + exp(-y113)))
      xb14 = (w2(1,14) * xa1
     + +w2(2,14) * xa2
     + +w2(3,14) * xa3
     + +w2(4,14) * xa4
     + +w2(5,14) * xa5
     + +w2(6,14) * xa6
     + +w2(7,14) * xa7)
     + * (1/(1 + exp(-y114)))
      xb15 = (w2(1,15) * xa1
     + +w2(2,15) * xa2
     + +w2(3,15) * xa3
     + +w2(4,15) * xa4
     + +w2(5,15) * xa5
     + +w2(6,15) * xa6
     + +w2(7,15) * xa7)
     + * (1/(1 + exp(-y115)))
C Outputs of the subroutine
      Yield(k) = xrO * (w3(1) * yf21
     + +w3(2) * yf22
     + +w3(3) * yf23
     + +w3(4) * yf24
     + +w3(5) * yf25
     + +w3(6) * yf26
     + +w3(7) * yf27
     + +b3)
     + +xmO
      dyieldDeqps(k,1) = xrO * (w1(1,1) * xb1
     + +w1(2,1) * xb2
     + +w1(3,1) * xb3
     + +w1(4,1) * xb4
     + +w1(5,1) * xb5
     + +w1(6,1) * xb6
     + +w1(7,1) * xb7
     + +w1(8,1) * xb8
     + +w1(9,1) * xb9
     + +w1(10,1) * xb10
     + +w1(11,1) * xb11
     + +w1(12,1) * xb12
     + +w1(13,1) * xb13
     + +w1(14,1) * xb14
     + +w1(15,1) * xb15) / xrI(1)
      dyieldDeqps(k,2) = xrO * (w1(1,2) * xb1
     + +w1(2,2) * xb2
     + +w1(3,2) * xb3
     + +w1(4,2) * xb4
     + +w1(5,2) * xb5
     + +w1(6,2) * xb6
     + +w1(7,2) * xb7
     + +w1(8,2) * xb8
     + +w1(9,2) * xb9
     + +w1(10,2) * xb10
     + +w1(11,2) * xb11
     + +w1(12,2) * xb12
     + +w1(13,2) * xb13
     + +w1(14,2) * xb14
     + +w1(15,2) * xb15)
     + /(xrI(2)*eqpsRate(k))
      dyieldDtemp(k) = xrO * (w1(1,3) * xb1
     + +w1(2,3) * xb2
     + +w1(3,3) * xb3
     + +w1(4,3) * xb4
     + +w1(5,3) * xb5
     + +w1(6,3) * xb6
     + +w1(7,3) * xb7
     + +w1(8,3) * xb8
     + +w1(9,3) * xb9
     + +w1(10,3) * xb10
     + +w1(11,3) * xb11
     + +w1(12,3) * xb12
     + +w1(13,3) * xb13
     + +w1(14,3) * xb14
     + +w1(15,3) * xb15) / xrI(3)
C Store the eqpsRate into stateNew variable 1
      stateNew(k,1) = eqpsRate(k)
      end do
C Return from the VUHARD subroutine
      return
      end
