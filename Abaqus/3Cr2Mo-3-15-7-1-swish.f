C **********************************************************************
C Function to compute the ANN : 3Cr2Mo-3-15-7-1-swish yield stress
C **********************************************************************
      subroutine vuhard (
C Read only -
     +  nblock, nElement, nIntPt, nLayer, nSecPt, lAnneal, stepTime,
     +  totalTime, dt, cmname, nstatev, nfieldv, nprops, props,
     +  tempOld, tempNew, fieldOld, fieldNew, stateOld, eqps, eqpsRate,
C Write only -
     +  yield, dyieldDtemp, dyieldDeqps, stateNew)
C
      include 'vaba_param.inc'
C
      dimension nElement(nblock), props(nprops), tempOld(nblock),
     +  fieldOld(nblock,nfieldv), stateOld(nblock,nstatev),
     +  tempNew(nblock), fieldNew(nblock,nfieldv), eqps(nblock),
     +  eqpsRate(nblock), yield(nblock), dyieldDtemp(nblock),
     +  dyieldDeqps(nblock,2), stateNew(nblock,nstatev)
C
      character*80 cmname
C Block of Data
      double precision w1(15, 3)
      data w1/-0.0414708940133296D0,
     + 0.5665196783122416D0,
     + 1.2856040392084338D0,
     + 0.3832477523838603D0,
     + 1.3093456168328068D0,
     + 1.0072595906819302D0,
     + -113.1597901614923103D0,
     + -8.9555504182743189D0,
     + -3.7413481864534717D0,
     + -0.9485029220552311D0,
     + 2.4876421038382035D0,
     + -7.1447121952971591D0,
     + 0.2704069177379732D0,
     + 0.9938822376547281D0,
     + -6.5023344760316952D0,
     + 1.9781931046638714D0,
     + -1.5003838649826238D0,
     + 0.8725059388736881D0,
     + 4.4481271568061649D0,
     + -8.1478156848318672D0,
     + 3.1324578401084886D0,
     + 0.2890290370493188D0,
     + -0.057298140185613D0,
     + -0.5266565564966863D0,
     + 1.2302503434598515D0,
     + -3.2344427362560704D0,
     + -1.6408285140554888D0,
     + 0.4632167953047332D0,
     + 1.3948864803449681D0,
     + -1.5739146804698276D0,
     + -0.7953855646817849D0,
     + 2.1897138613325935D0,
     + 0.7894306132219282D0,
     + -2.8848120007679254D0,
     + -0.8122915885478535D0,
     + -3.8606519409220672D0,
     + -0.1437098518229311D0,
     + -0.1004126951919852D0,
     + 0.8393158270233833D0,
     + -0.2857783462568015D0,
     + 0.5219375231374153D0,
     + 0.4859868546801741D0,
     + -2.3370284842608138D0,
     + -1.072708810901029D0,
     + -3.7812303354468297D0/
      double precision b1(15)
      data b1/-1.514159031444323D0,
     + -1.7073001974538695D0,
     + -2.6089805832834805D0,
     + -3.3633194104781459D0,
     + 0.5756919553197269D0,
     + -2.3599088361253293D0,
     + 0.112405550338218D0,
     + 0.3118297990610824D0,
     + -0.0016750747521787D0,
     + -0.5336063273262155D0,
     + 0.4635823252903666D0,
     + -0.2676298792978249D0,
     + -0.1368631571520707D0,
     + -0.1757215537171568D0,
     + -0.7104545770281958D0/
      double precision w2(7, 15)
      data w2/-4.0170436471570001D0,
     + -0.0741214198480474D0,
     + 0.4234361801830355D0,
     + -0.4589282940151138D0,
     + 1.3535128933502267D0,
     + -0.2736669027146322D0,
     + 1.1309016626972608D0,
     + -0.0756619864737364D0,
     + 0.3910778099718811D0,
     + -1.311728237238585D0,
     + -0.7373098439203647D0,
     + -0.2906803381152179D0,
     + 0.1781710729975584D0,
     + 0.5797600331687335D0,
     + 2.2169263861624704D0,
     + 0.8746853918022136D0,
     + 0.0286652596035779D0,
     + 2.4768267725049289D0,
     + -0.2978595881790939D0,
     + 0.479503126958767D0,
     + 0.0935755814037746D0,
     + -5.4382827961597267D0,
     + -2.0442224162134686D0,
     + -0.4039900695643592D0,
     + 1.6629550731320288D0,
     + 0.8369819012153222D0,
     + -1.5339550121089045D0,
     + 2.2825886041777981D0,
     + -0.100109895456768D0,
     + 0.6943073253881865D0,
     + 0.3364563698724212D0,
     + 5.7929396855372968D0,
     + 0.4239795157392367D0,
     + 0.0225328585777457D0,
     + -0.0632419173048358D0,
     + -10.119769490143387D0,
     + 1.2016588717061893D0,
     + 0.3447517062052179D0,
     + 0.8188296130020295D0,
     + -0.4460726959527562D0,
     + 0.6174925856914065D0,
     + 0.0496243462351786D0,
     + 0.6759657306973414D0,
     + 0.0606908412003684D0,
     + 7.4451350742285953D0,
     + -1.6821584940104741D0,
     + 0.804246953774497D0,
     + -2.3626433656039949D0,
     + 1.0258658171075772D0,
     + -2.5044220601003868D0,
     + 4.8146753699030223D0,
     + -1.8691954827982669D0,
     + -2.3552770210426246D0,
     + 0.9575133490538588D0,
     + -0.8303858254355071D0,
     + 1.2168683236921156D0,
     + 2.7935345084356329D0,
     + -1.3586254072751114D0,
     + 0.994482657083585D0,
     + 1.3372571630186616D0,
     + -1.7809245709815205D0,
     + -0.356974875329602D0,
     + 0.6507930185112397D0,
     + -6.5374917296201396D0,
     + 0.7702576548845763D0,
     + -0.7891202932025085D0,
     + 1.7950746105977395D0,
     + 0.1534639897978451D0,
     + -0.3751051236999839D0,
     + 0.5826343237735531D0,
     + -0.6501104573522777D0,
     + -1.2380968511176043D0,
     + -1.6788417885568481D0,
     + -2.7758634448462769D0,
     + -1.5105923887408526D0,
     + -0.1516287744310662D0,
     + -0.094169874297975D0,
     + 3.7097104139976769D0,
     + -2.2773222042607579D0,
     + 3.0202463150490857D0,
     + 1.781445057930356D0,
     + 0.3566706729349443D0,
     + 0.429084231007665D0,
     + -0.7771519756863512D0,
     + -0.5378402572838141D0,
     + 1.6660050787732836D0,
     + 0.2312738900301372D0,
     + -2.2160835868529771D0,
     + 1.0738935525124622D0,
     + -0.0617512897850185D0,
     + -1.9766338657502454D0,
     + -2.4745994553301864D0,
     + -0.0442251913603202D0,
     + 0.3800900667314958D0,
     + 0.4190610892931714D0,
     + 0.8451985199290852D0,
     + 1.1506605387961102D0,
     + -0.7817489393609139D0,
     + -3.6261905757710768D0,
     + -0.7690077977389385D0,
     + -2.155108451254069D0,
     + 2.7129025329087204D0,
     + 1.2750349598106203D0,
     + -0.5988922888975803D0,
     + -1.6804379925477873D0/
      double precision b2(7)
      data b2/-3.8279278007969504D0,
     + -0.3337023162292585D0,
     + -1.1187581367551267D0,
     + -0.507787753824566D0,
     + 0.0660841985784935D0,
     + -0.4883740100251737D0,
     + 0.3577967123285332D0/
      double precision w3(7)
      data w3/-0.0439584572078633D0,
     + -0.1395192062181606D0,
     + -0.4469517639667077D0,
     + 0.0987093186480988D0,
     + 0.2123161542916682D0,
     + 0.2490934211080938D0,
     + -0.1667327368191219D0/
      double precision b3
      data b3/0.1767257829569882D0/
      double precision xmI(3)
      data xmI/0D0,
     + 0D0,
     + 1050D0/
      double precision xrI(3)
      data xrI/0.7D0,
     + 8.5171931914162382D0,
     + 200D0/
      double precision xmO
      data xmO/0.03016674D0/
      double precision xrO
      data xrO/153.709333259999994D0/
      double precision xdeps0
      data xdeps0/0.001D0/
C Do the main loop for all block values
      do k = 1, nblock
C Preprocessing of the variables
      xeps = (eqps(k) - xmI(1))/xrI(1)
      if (eqpsRate(k) > xdeps0) then
        xdeps = (log(eqpsRate(k)/xdeps0) - xmI(2))/xrI(2)
      else
        xdeps = 0
        eqpsRate(k) = xdeps0
      endif
      xtemp = (tempNew(k) - xmI(3))/xrI(3)
C Hidden layer #1 - (y11 to y115)
      y11 = w1(1,1) * xeps
     + +w1(1,2) * xdeps
     + +w1(1,3) * xtemp
     + +b1(1)
      y12 = w1(2,1) * xeps
     + +w1(2,2) * xdeps
     + +w1(2,3) * xtemp
     + +b1(2)
      y13 = w1(3,1) * xeps
     + +w1(3,2) * xdeps
     + +w1(3,3) * xtemp
     + +b1(3)
      y14 = w1(4,1) * xeps
     + +w1(4,2) * xdeps
     + +w1(4,3) * xtemp
     + +b1(4)
      y15 = w1(5,1) * xeps
     + +w1(5,2) * xdeps
     + +w1(5,3) * xtemp
     + +b1(5)
      y16 = w1(6,1) * xeps
     + +w1(6,2) * xdeps
     + +w1(6,3) * xtemp
     + +b1(6)
      y17 = w1(7,1) * xeps
     + +w1(7,2) * xdeps
     + +w1(7,3) * xtemp
     + +b1(7)
      y18 = w1(8,1) * xeps
     + +w1(8,2) * xdeps
     + +w1(8,3) * xtemp
     + +b1(8)
      y19 = w1(9,1) * xeps
     + +w1(9,2) * xdeps
     + +w1(9,3) * xtemp
     + +b1(9)
      y110 = w1(10,1) * xeps
     + +w1(10,2) * xdeps
     + +w1(10,3) * xtemp
     + +b1(10)
      y111 = w1(11,1) * xeps
     + +w1(11,2) * xdeps
     + +w1(11,3) * xtemp
     + +b1(11)
      y112 = w1(12,1) * xeps
     + +w1(12,2) * xdeps
     + +w1(12,3) * xtemp
     + +b1(12)
      y113 = w1(13,1) * xeps
     + +w1(13,2) * xdeps
     + +w1(13,3) * xtemp
     + +b1(13)
      y114 = w1(14,1) * xeps
     + +w1(14,2) * xdeps
     + +w1(14,3) * xtemp
     + +b1(14)
      y115 = w1(15,1) * xeps
     + +w1(15,2) * xdeps
     + +w1(15,3) * xtemp
     + +b1(15)
C swish activation function - (yf11 to yf115)
      yf11 = y11/(1 + exp(-y11))
      yf12 = y12/(1 + exp(-y12))
      yf13 = y13/(1 + exp(-y13))
      yf14 = y14/(1 + exp(-y14))
      yf15 = y15/(1 + exp(-y15))
      yf16 = y16/(1 + exp(-y16))
      yf17 = y17/(1 + exp(-y17))
      yf18 = y18/(1 + exp(-y18))
      yf19 = y19/(1 + exp(-y19))
      yf110 = y110/(1 + exp(-y110))
      yf111 = y111/(1 + exp(-y111))
      yf112 = y112/(1 + exp(-y112))
      yf113 = y113/(1 + exp(-y113))
      yf114 = y114/(1 + exp(-y114))
      yf115 = y115/(1 + exp(-y115))
C Hidden layer #2 - (y21 to y27)
      y21 = w2(1,1) * yf11
     + +w2(1,2) * yf12
     + +w2(1,3) * yf13
     + +w2(1,4) * yf14
     + +w2(1,5) * yf15
     + +w2(1,6) * yf16
     + +w2(1,7) * yf17
     + +w2(1,8) * yf18
     + +w2(1,9) * yf19
     + +w2(1,10) * yf110
     + +w2(1,11) * yf111
     + +w2(1,12) * yf112
     + +w2(1,13) * yf113
     + +w2(1,14) * yf114
     + +w2(1,15) * yf115
     + +b2(1)
      y22 = w2(2,1) * yf11
     + +w2(2,2) * yf12
     + +w2(2,3) * yf13
     + +w2(2,4) * yf14
     + +w2(2,5) * yf15
     + +w2(2,6) * yf16
     + +w2(2,7) * yf17
     + +w2(2,8) * yf18
     + +w2(2,9) * yf19
     + +w2(2,10) * yf110
     + +w2(2,11) * yf111
     + +w2(2,12) * yf112
     + +w2(2,13) * yf113
     + +w2(2,14) * yf114
     + +w2(2,15) * yf115
     + +b2(2)
      y23 = w2(3,1) * yf11
     + +w2(3,2) * yf12
     + +w2(3,3) * yf13
     + +w2(3,4) * yf14
     + +w2(3,5) * yf15
     + +w2(3,6) * yf16
     + +w2(3,7) * yf17
     + +w2(3,8) * yf18
     + +w2(3,9) * yf19
     + +w2(3,10) * yf110
     + +w2(3,11) * yf111
     + +w2(3,12) * yf112
     + +w2(3,13) * yf113
     + +w2(3,14) * yf114
     + +w2(3,15) * yf115
     + +b2(3)
      y24 = w2(4,1) * yf11
     + +w2(4,2) * yf12
     + +w2(4,3) * yf13
     + +w2(4,4) * yf14
     + +w2(4,5) * yf15
     + +w2(4,6) * yf16
     + +w2(4,7) * yf17
     + +w2(4,8) * yf18
     + +w2(4,9) * yf19
     + +w2(4,10) * yf110
     + +w2(4,11) * yf111
     + +w2(4,12) * yf112
     + +w2(4,13) * yf113
     + +w2(4,14) * yf114
     + +w2(4,15) * yf115
     + +b2(4)
      y25 = w2(5,1) * yf11
     + +w2(5,2) * yf12
     + +w2(5,3) * yf13
     + +w2(5,4) * yf14
     + +w2(5,5) * yf15
     + +w2(5,6) * yf16
     + +w2(5,7) * yf17
     + +w2(5,8) * yf18
     + +w2(5,9) * yf19
     + +w2(5,10) * yf110
     + +w2(5,11) * yf111
     + +w2(5,12) * yf112
     + +w2(5,13) * yf113
     + +w2(5,14) * yf114
     + +w2(5,15) * yf115
     + +b2(5)
      y26 = w2(6,1) * yf11
     + +w2(6,2) * yf12
     + +w2(6,3) * yf13
     + +w2(6,4) * yf14
     + +w2(6,5) * yf15
     + +w2(6,6) * yf16
     + +w2(6,7) * yf17
     + +w2(6,8) * yf18
     + +w2(6,9) * yf19
     + +w2(6,10) * yf110
     + +w2(6,11) * yf111
     + +w2(6,12) * yf112
     + +w2(6,13) * yf113
     + +w2(6,14) * yf114
     + +w2(6,15) * yf115
     + +b2(6)
      y27 = w2(7,1) * yf11
     + +w2(7,2) * yf12
     + +w2(7,3) * yf13
     + +w2(7,4) * yf14
     + +w2(7,5) * yf15
     + +w2(7,6) * yf16
     + +w2(7,7) * yf17
     + +w2(7,8) * yf18
     + +w2(7,9) * yf19
     + +w2(7,10) * yf110
     + +w2(7,11) * yf111
     + +w2(7,12) * yf112
     + +w2(7,13) * yf113
     + +w2(7,14) * yf114
     + +w2(7,15) * yf115
     + +b2(7)
C swish activation function - (yf21 to yf27)
      yf21 = y21/(1 + exp(-y21))
      yf22 = y22/(1 + exp(-y22))
      yf23 = y23/(1 + exp(-y23))
      yf24 = y24/(1 + exp(-y24))
      yf25 = y25/(1 + exp(-y25))
      yf26 = y26/(1 + exp(-y26))
      yf27 = y27/(1 + exp(-y27))
C Derivatives terms - (xa1 to xa7) and (xb1 to xb15)
      xa1 = w3(1) * (yf21 + (1 - yf21)/(1 + exp(-y21)))
      xa2 = w3(2) * (yf22 + (1 - yf22)/(1 + exp(-y22)))
      xa3 = w3(3) * (yf23 + (1 - yf23)/(1 + exp(-y23)))
      xa4 = w3(4) * (yf24 + (1 - yf24)/(1 + exp(-y24)))
      xa5 = w3(5) * (yf25 + (1 - yf25)/(1 + exp(-y25)))
      xa6 = w3(6) * (yf26 + (1 - yf26)/(1 + exp(-y26)))
      xa7 = w3(7) * (yf27 + (1 - yf27)/(1 + exp(-y27)))
      xb1 = (w2(1,1) * xa1
     + +w2(2,1) * xa2
     + +w2(3,1) * xa3
     + +w2(4,1) * xa4
     + +w2(5,1) * xa5
     + +w2(6,1) * xa6
     + +w2(7,1) * xa7)
     + * (yf11 + (1 - yf11)/(1 + exp(-y11)))
      xb2 = (w2(1,2) * xa1
     + +w2(2,2) * xa2
     + +w2(3,2) * xa3
     + +w2(4,2) * xa4
     + +w2(5,2) * xa5
     + +w2(6,2) * xa6
     + +w2(7,2) * xa7)
     + * (yf12 + (1 - yf12)/(1 + exp(-y12)))
      xb3 = (w2(1,3) * xa1
     + +w2(2,3) * xa2
     + +w2(3,3) * xa3
     + +w2(4,3) * xa4
     + +w2(5,3) * xa5
     + +w2(6,3) * xa6
     + +w2(7,3) * xa7)
     + * (yf13 + (1 - yf13)/(1 + exp(-y13)))
      xb4 = (w2(1,4) * xa1
     + +w2(2,4) * xa2
     + +w2(3,4) * xa3
     + +w2(4,4) * xa4
     + +w2(5,4) * xa5
     + +w2(6,4) * xa6
     + +w2(7,4) * xa7)
     + * (yf14 + (1 - yf14)/(1 + exp(-y14)))
      xb5 = (w2(1,5) * xa1
     + +w2(2,5) * xa2
     + +w2(3,5) * xa3
     + +w2(4,5) * xa4
     + +w2(5,5) * xa5
     + +w2(6,5) * xa6
     + +w2(7,5) * xa7)
     + * (yf15 + (1 - yf15)/(1 + exp(-y15)))
      xb6 = (w2(1,6) * xa1
     + +w2(2,6) * xa2
     + +w2(3,6) * xa3
     + +w2(4,6) * xa4
     + +w2(5,6) * xa5
     + +w2(6,6) * xa6
     + +w2(7,6) * xa7)
     + * (yf16 + (1 - yf16)/(1 + exp(-y16)))
      xb7 = (w2(1,7) * xa1
     + +w2(2,7) * xa2
     + +w2(3,7) * xa3
     + +w2(4,7) * xa4
     + +w2(5,7) * xa5
     + +w2(6,7) * xa6
     + +w2(7,7) * xa7)
     + * (yf17 + (1 - yf17)/(1 + exp(-y17)))
      xb8 = (w2(1,8) * xa1
     + +w2(2,8) * xa2
     + +w2(3,8) * xa3
     + +w2(4,8) * xa4
     + +w2(5,8) * xa5
     + +w2(6,8) * xa6
     + +w2(7,8) * xa7)
     + * (yf18 + (1 - yf18)/(1 + exp(-y18)))
      xb9 = (w2(1,9) * xa1
     + +w2(2,9) * xa2
     + +w2(3,9) * xa3
     + +w2(4,9) * xa4
     + +w2(5,9) * xa5
     + +w2(6,9) * xa6
     + +w2(7,9) * xa7)
     + * (yf19 + (1 - yf19)/(1 + exp(-y19)))
      xb10 = (w2(1,10) * xa1
     + +w2(2,10) * xa2
     + +w2(3,10) * xa3
     + +w2(4,10) * xa4
     + +w2(5,10) * xa5
     + +w2(6,10) * xa6
     + +w2(7,10) * xa7)
     + * (yf110 + (1 - yf110)/(1 + exp(-y110)))
      xb11 = (w2(1,11) * xa1
     + +w2(2,11) * xa2
     + +w2(3,11) * xa3
     + +w2(4,11) * xa4
     + +w2(5,11) * xa5
     + +w2(6,11) * xa6
     + +w2(7,11) * xa7)
     + * (yf111 + (1 - yf111)/(1 + exp(-y111)))
      xb12 = (w2(1,12) * xa1
     + +w2(2,12) * xa2
     + +w2(3,12) * xa3
     + +w2(4,12) * xa4
     + +w2(5,12) * xa5
     + +w2(6,12) * xa6
     + +w2(7,12) * xa7)
     + * (yf112 + (1 - yf112)/(1 + exp(-y112)))
      xb13 = (w2(1,13) * xa1
     + +w2(2,13) * xa2
     + +w2(3,13) * xa3
     + +w2(4,13) * xa4
     + +w2(5,13) * xa5
     + +w2(6,13) * xa6
     + +w2(7,13) * xa7)
     + * (yf113 + (1 - yf113)/(1 + exp(-y113)))
      xb14 = (w2(1,14) * xa1
     + +w2(2,14) * xa2
     + +w2(3,14) * xa3
     + +w2(4,14) * xa4
     + +w2(5,14) * xa5
     + +w2(6,14) * xa6
     + +w2(7,14) * xa7)
     + * (yf114 + (1 - yf114)/(1 + exp(-y114)))
      xb15 = (w2(1,15) * xa1
     + +w2(2,15) * xa2
     + +w2(3,15) * xa3
     + +w2(4,15) * xa4
     + +w2(5,15) * xa5
     + +w2(6,15) * xa6
     + +w2(7,15) * xa7)
     + * (yf115 + (1 - yf115)/(1 + exp(-y115)))
C Outputs of the subroutine
      Yield(k) = xrO * (w3(1) * yf21
     + +w3(2) * yf22
     + +w3(3) * yf23
     + +w3(4) * yf24
     + +w3(5) * yf25
     + +w3(6) * yf26
     + +w3(7) * yf27
     + +b3)
     + +xmO
      dyieldDeqps(k,1) = xrO * (w1(1,1) * xb1
     + +w1(2,1) * xb2
     + +w1(3,1) * xb3
     + +w1(4,1) * xb4
     + +w1(5,1) * xb5
     + +w1(6,1) * xb6
     + +w1(7,1) * xb7
     + +w1(8,1) * xb8
     + +w1(9,1) * xb9
     + +w1(10,1) * xb10
     + +w1(11,1) * xb11
     + +w1(12,1) * xb12
     + +w1(13,1) * xb13
     + +w1(14,1) * xb14
     + +w1(15,1) * xb15) / xrI(1)
      dyieldDeqps(k,2) = xrO * (w1(1,2) * xb1
     + +w1(2,2) * xb2
     + +w1(3,2) * xb3
     + +w1(4,2) * xb4
     + +w1(5,2) * xb5
     + +w1(6,2) * xb6
     + +w1(7,2) * xb7
     + +w1(8,2) * xb8
     + +w1(9,2) * xb9
     + +w1(10,2) * xb10
     + +w1(11,2) * xb11
     + +w1(12,2) * xb12
     + +w1(13,2) * xb13
     + +w1(14,2) * xb14
     + +w1(15,2) * xb15)
     + /(xrI(2)*eqpsRate(k))
      dyieldDtemp(k) = xrO * (w1(1,3) * xb1
     + +w1(2,3) * xb2
     + +w1(3,3) * xb3
     + +w1(4,3) * xb4
     + +w1(5,3) * xb5
     + +w1(6,3) * xb6
     + +w1(7,3) * xb7
     + +w1(8,3) * xb8
     + +w1(9,3) * xb9
     + +w1(10,3) * xb10
     + +w1(11,3) * xb11
     + +w1(12,3) * xb12
     + +w1(13,3) * xb13
     + +w1(14,3) * xb14
     + +w1(15,3) * xb15) / xrI(3)
C Store the eqpsRate into stateNew variable 1
      stateNew(k,1) = eqpsRate(k)
      end do
C Return from the VUHARD subroutine
      return
      end
