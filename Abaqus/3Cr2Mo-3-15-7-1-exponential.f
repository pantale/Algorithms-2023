C **********************************************************************
C Function to compute the ANN : 3Cr2Mo-3-15-7-1-exponential yield stress
C **********************************************************************
      subroutine vuhard (
C Read only -
     +  nblock, nElement, nIntPt, nLayer, nSecPt, lAnneal, stepTime,
     +  totalTime, dt, cmname, nstatev, nfieldv, nprops, props,
     +  tempOld, tempNew, fieldOld, fieldNew, stateOld, eqps, eqpsRate,
C Write only -
     +  yield, dyieldDtemp, dyieldDeqps, stateNew)
C
      include 'vaba_param.inc'
C
      dimension nElement(nblock), props(nprops), tempOld(nblock),
     +  fieldOld(nblock,nfieldv), stateOld(nblock,nstatev),
     +  tempNew(nblock), fieldNew(nblock,nfieldv), eqps(nblock),
     +  eqpsRate(nblock), yield(nblock), dyieldDtemp(nblock),
     +  dyieldDeqps(nblock,2), stateNew(nblock,nstatev)
C
      character*80 cmname
C Block of Data
      double precision w1(15, 3)
      data w1/-0.4806480121407919D0,
     + 1.207228613999026D0,
     + -0.0244592521199683D0,
     + -0.0889111093970822D0,
     + -5.4294804122741436D0,
     + 2.0970722151344212D0,
     + -0.4027120610689452D0,
     + 0.238186406813411D0,
     + 1.5779932315142409D0,
     + -91.5683267012947226D0,
     + 1.7188440003540384D0,
     + -7.015713977045861D0,
     + 1.847862048299544D0,
     + -7.4767206594838944D0,
     + -2.0935797571617454D0,
     + -1.4413423018610418D0,
     + -4.2043666279054435D0,
     + 1.409877538859786D0,
     + 0.484924838241182D0,
     + -0.9102634918952356D0,
     + -2.7788999154634286D0,
     + -2.6687520378197793D0,
     + -1.4855381001919803D0,
     + -4.3961655013787517D0,
     + 0.4288879747018512D0,
     + -0.3668234886427134D0,
     + -1.2490466088533905D0,
     + 2.6861622668181662D0,
     + 1.2001181780532981D0,
     + 0.7619192283617973D0,
     + 0.6972844807863323D0,
     + -0.0538557034708091D0,
     + -0.1041070082281522D0,
     + -1.5380894274699377D0,
     + 0.8722329988270943D0,
     + 2.1740674242152802D0,
     + 1.3414348906129201D0,
     + 0.4509277333207516D0,
     + -3.334794516686677D0,
     + -0.108537144481001D0,
     + -4.3859307091134276D0,
     + -3.0432838970560074D0,
     + -26.3612711094077845D0,
     + -0.5340618319250844D0,
     + -6.5293429885464134D0/
      double precision b1(15)
      data b1/0.8425506742941585D0,
     + 0.7802696970951829D0,
     + -0.650077706845946D0,
     + -0.1431982284486512D0,
     + -0.763529846589732D0,
     + -1.6583712204268213D0,
     + -0.2883697546306726D0,
     + -0.1066827316726227D0,
     + 0.5934689053246176D0,
     + 0.8903050360639305D0,
     + -0.5728482632584757D0,
     + 0.2797073355675079D0,
     + -3.0363643381173726D0,
     + -0.9463682073331116D0,
     + -1.5643161845414224D0/
      double precision w2(7, 15)
      data w2/-1.3583180577335991D0,
     + -0.1036262427931111D0,
     + 0.96145774413975D0,
     + 1.5179762523994527D0,
     + 0.0053586871288175D0,
     + 0.346654382998654D0,
     + -2.4127465877452066D0,
     + 1.6913178558897854D0,
     + -2.6655096491656187D0,
     + -1.8472824840274575D0,
     + -5.7107989186751169D0,
     + -0.1059031336908339D0,
     + -0.2854057234658229D0,
     + 0.1302752195735538D0,
     + -1.5957412132909792D0,
     + -0.2740335103691455D0,
     + -4.4330497371948638D0,
     + -3.4546014764871669D0,
     + -0.5994753558837389D0,
     + -1.3191712520098842D0,
     + 0.5005870874483709D0,
     + -2.0242798130149313D0,
     + 0.6327742024825932D0,
     + -0.5677640404065877D0,
     + 1.8507071875909771D0,
     + -1.477738239264061D0,
     + 1.1614280328258728D0,
     + -0.5552069352663478D0,
     + -0.0073395490016515D0,
     + -2.0336989470633551D0,
     + -5.3511449669570386D0,
     + -2.8574021704565684D0,
     + -0.1207814556354499D0,
     + 0.4793208994901828D0,
     + -0.8780677930952659D0,
     + -1.1087026152336368D0,
     + -0.3745043212066425D0,
     + -3.4565635023742027D0,
     + -5.9992187118955469D0,
     + 0.0169114670762782D0,
     + 0.0319894341206804D0,
     + 0.3309824367578671D0,
     + 0.061901433833668D0,
     + 0.2664434367224609D0,
     + 3.4138595113789103D0,
     + 1.815564125966131D0,
     + -0.0654601409071407D0,
     + -1.5105360504729235D0,
     + -1.4070064701885014D0,
     + -2.3176750130744406D0,
     + -0.5010871204508114D0,
     + 0.1955704014603565D0,
     + 1.1534047490277224D0,
     + 0.6542208713533506D0,
     + -1.105272946219392D0,
     + -0.2329905216180041D0,
     + -0.1398880618953912D0,
     + 1.7835829637937675D0,
     + 2.1837214642087766D0,
     + -8.5660787072831894D0,
     + 0.5254414256457867D0,
     + -0.8512704945083187D0,
     + -0.1707379273327894D0,
     + 2.8654250866119249D0,
     + -0.6092446307629356D0,
     + 0.4471432005999669D0,
     + 0.4628879568380465D0,
     + 0.0820942174927519D0,
     + 0.2294644630080125D0,
     + 0.0227450475905853D0,
     + -1.313667465690546D0,
     + -0.0317523893327203D0,
     + -1.4832674086653057D0,
     + 4.1681451488848698D0,
     + -1.9074478072314971D0,
     + 0.1394535566328948D0,
     + 0.3547408583636039D0,
     + 1.9447443738318453D0,
     + -0.2475404082778628D0,
     + 1.2550251238343793D0,
     + -4.6623438127406205D0,
     + 0.4455682454812884D0,
     + -4.6728685960320924D0,
     + -1.3190606298101375D0,
     + 2.4306065289279744D0,
     + 0.1370688914604545D0,
     + -14.0546050579664481D0,
     + -2.5221562460491245D0,
     + -1.1202774552589667D0,
     + -1.5962178199465624D0,
     + -0.4011745430895958D0,
     + -1.5054167724475045D0,
     + -0.4781508010573228D0,
     + -3.0087956608890543D0,
     + -1.1138622199939563D0,
     + 2.0790337369377698D0,
     + -0.1051095697918745D0,
     + -0.0283757572904096D0,
     + 0.2533801124706598D0,
     + -0.1199199208749741D0,
     + -4.9475811059715493D0,
     + 1.4959308259667656D0,
     + 1.1489295641739445D0,
     + 1.0523600603062016D0,
     + 1.1269091267195503D0/
      double precision b2(7)
      data b2/-3.8360666884993D0,
     + -0.5916622923547769D0,
     + -0.4451151060451074D0,
     + -0.169269135583556D0,
     + -1.5907217398246527D0,
     + -0.7079394398621929D0,
     + -0.4775506394938053D0/
      double precision w3(7)
      data w3/-0.4387979731981512D0,
     + 0.7899798094498046D0,
     + 1.0610106104886365D0,
     + -0.9789348281035228D0,
     + -0.5858120251319294D0,
     + 0.806334591625818D0,
     + 0.7636475447582197D0/
      double precision b3
      data b3/0.2102881986868078D0/
      double precision xmI(3)
      data xmI/0D0,
     + 0D0,
     + 1050D0/
      double precision xrI(3)
      data xrI/0.7D0,
     + 8.5171931914162382D0,
     + 200D0/
      double precision xmO
      data xmO/0.03016674D0/
      double precision xrO
      data xrO/153.709333259999994D0/
      double precision xdeps0
      data xdeps0/0.001D0/
C Do the main loop for all block values
      do k = 1, nblock
C Preprocessing of the variables
      xeps = (eqps(k) - xmI(1))/xrI(1)
      if (eqpsRate(k) > xdeps0) then
        xdeps = (log(eqpsRate(k)/xdeps0) - xmI(2))/xrI(2)
      else
        xdeps = 0
        eqpsRate(k) = xdeps0
      endif
      xtemp = (tempNew(k) - xmI(3))/xrI(3)
C Hidden layer #1 - (y11 to y115)
      y11 = w1(1,1) * xeps
     + +w1(1,2) * xdeps
     + +w1(1,3) * xtemp
     + +b1(1)
      y12 = w1(2,1) * xeps
     + +w1(2,2) * xdeps
     + +w1(2,3) * xtemp
     + +b1(2)
      y13 = w1(3,1) * xeps
     + +w1(3,2) * xdeps
     + +w1(3,3) * xtemp
     + +b1(3)
      y14 = w1(4,1) * xeps
     + +w1(4,2) * xdeps
     + +w1(4,3) * xtemp
     + +b1(4)
      y15 = w1(5,1) * xeps
     + +w1(5,2) * xdeps
     + +w1(5,3) * xtemp
     + +b1(5)
      y16 = w1(6,1) * xeps
     + +w1(6,2) * xdeps
     + +w1(6,3) * xtemp
     + +b1(6)
      y17 = w1(7,1) * xeps
     + +w1(7,2) * xdeps
     + +w1(7,3) * xtemp
     + +b1(7)
      y18 = w1(8,1) * xeps
     + +w1(8,2) * xdeps
     + +w1(8,3) * xtemp
     + +b1(8)
      y19 = w1(9,1) * xeps
     + +w1(9,2) * xdeps
     + +w1(9,3) * xtemp
     + +b1(9)
      y110 = w1(10,1) * xeps
     + +w1(10,2) * xdeps
     + +w1(10,3) * xtemp
     + +b1(10)
      y111 = w1(11,1) * xeps
     + +w1(11,2) * xdeps
     + +w1(11,3) * xtemp
     + +b1(11)
      y112 = w1(12,1) * xeps
     + +w1(12,2) * xdeps
     + +w1(12,3) * xtemp
     + +b1(12)
      y113 = w1(13,1) * xeps
     + +w1(13,2) * xdeps
     + +w1(13,3) * xtemp
     + +b1(13)
      y114 = w1(14,1) * xeps
     + +w1(14,2) * xdeps
     + +w1(14,3) * xtemp
     + +b1(14)
      y115 = w1(15,1) * xeps
     + +w1(15,2) * xdeps
     + +w1(15,3) * xtemp
     + +b1(15)
C exponential activation function - (yf11 to yf115)
      yf11 = exp(y11)
      yf12 = exp(y12)
      yf13 = exp(y13)
      yf14 = exp(y14)
      yf15 = exp(y15)
      yf16 = exp(y16)
      yf17 = exp(y17)
      yf18 = exp(y18)
      yf19 = exp(y19)
      yf110 = exp(y110)
      yf111 = exp(y111)
      yf112 = exp(y112)
      yf113 = exp(y113)
      yf114 = exp(y114)
      yf115 = exp(y115)
C Hidden layer #2 - (y21 to y27)
      y21 = w2(1,1) * yf11
     + +w2(1,2) * yf12
     + +w2(1,3) * yf13
     + +w2(1,4) * yf14
     + +w2(1,5) * yf15
     + +w2(1,6) * yf16
     + +w2(1,7) * yf17
     + +w2(1,8) * yf18
     + +w2(1,9) * yf19
     + +w2(1,10) * yf110
     + +w2(1,11) * yf111
     + +w2(1,12) * yf112
     + +w2(1,13) * yf113
     + +w2(1,14) * yf114
     + +w2(1,15) * yf115
     + +b2(1)
      y22 = w2(2,1) * yf11
     + +w2(2,2) * yf12
     + +w2(2,3) * yf13
     + +w2(2,4) * yf14
     + +w2(2,5) * yf15
     + +w2(2,6) * yf16
     + +w2(2,7) * yf17
     + +w2(2,8) * yf18
     + +w2(2,9) * yf19
     + +w2(2,10) * yf110
     + +w2(2,11) * yf111
     + +w2(2,12) * yf112
     + +w2(2,13) * yf113
     + +w2(2,14) * yf114
     + +w2(2,15) * yf115
     + +b2(2)
      y23 = w2(3,1) * yf11
     + +w2(3,2) * yf12
     + +w2(3,3) * yf13
     + +w2(3,4) * yf14
     + +w2(3,5) * yf15
     + +w2(3,6) * yf16
     + +w2(3,7) * yf17
     + +w2(3,8) * yf18
     + +w2(3,9) * yf19
     + +w2(3,10) * yf110
     + +w2(3,11) * yf111
     + +w2(3,12) * yf112
     + +w2(3,13) * yf113
     + +w2(3,14) * yf114
     + +w2(3,15) * yf115
     + +b2(3)
      y24 = w2(4,1) * yf11
     + +w2(4,2) * yf12
     + +w2(4,3) * yf13
     + +w2(4,4) * yf14
     + +w2(4,5) * yf15
     + +w2(4,6) * yf16
     + +w2(4,7) * yf17
     + +w2(4,8) * yf18
     + +w2(4,9) * yf19
     + +w2(4,10) * yf110
     + +w2(4,11) * yf111
     + +w2(4,12) * yf112
     + +w2(4,13) * yf113
     + +w2(4,14) * yf114
     + +w2(4,15) * yf115
     + +b2(4)
      y25 = w2(5,1) * yf11
     + +w2(5,2) * yf12
     + +w2(5,3) * yf13
     + +w2(5,4) * yf14
     + +w2(5,5) * yf15
     + +w2(5,6) * yf16
     + +w2(5,7) * yf17
     + +w2(5,8) * yf18
     + +w2(5,9) * yf19
     + +w2(5,10) * yf110
     + +w2(5,11) * yf111
     + +w2(5,12) * yf112
     + +w2(5,13) * yf113
     + +w2(5,14) * yf114
     + +w2(5,15) * yf115
     + +b2(5)
      y26 = w2(6,1) * yf11
     + +w2(6,2) * yf12
     + +w2(6,3) * yf13
     + +w2(6,4) * yf14
     + +w2(6,5) * yf15
     + +w2(6,6) * yf16
     + +w2(6,7) * yf17
     + +w2(6,8) * yf18
     + +w2(6,9) * yf19
     + +w2(6,10) * yf110
     + +w2(6,11) * yf111
     + +w2(6,12) * yf112
     + +w2(6,13) * yf113
     + +w2(6,14) * yf114
     + +w2(6,15) * yf115
     + +b2(6)
      y27 = w2(7,1) * yf11
     + +w2(7,2) * yf12
     + +w2(7,3) * yf13
     + +w2(7,4) * yf14
     + +w2(7,5) * yf15
     + +w2(7,6) * yf16
     + +w2(7,7) * yf17
     + +w2(7,8) * yf18
     + +w2(7,9) * yf19
     + +w2(7,10) * yf110
     + +w2(7,11) * yf111
     + +w2(7,12) * yf112
     + +w2(7,13) * yf113
     + +w2(7,14) * yf114
     + +w2(7,15) * yf115
     + +b2(7)
C exponential activation function - (yf21 to yf27)
      yf21 = exp(y21)
      yf22 = exp(y22)
      yf23 = exp(y23)
      yf24 = exp(y24)
      yf25 = exp(y25)
      yf26 = exp(y26)
      yf27 = exp(y27)
C Derivatives terms - (xa1 to xa7) and (xb1 to xb15)
      xa1 = w3(1) * yf21
      xa2 = w3(2) * yf22
      xa3 = w3(3) * yf23
      xa4 = w3(4) * yf24
      xa5 = w3(5) * yf25
      xa6 = w3(6) * yf26
      xa7 = w3(7) * yf27
      xb1 = (w2(1,1) * xa1
     + +w2(2,1) * xa2
     + +w2(3,1) * xa3
     + +w2(4,1) * xa4
     + +w2(5,1) * xa5
     + +w2(6,1) * xa6
     + +w2(7,1) * xa7)
     + * yf11
      xb2 = (w2(1,2) * xa1
     + +w2(2,2) * xa2
     + +w2(3,2) * xa3
     + +w2(4,2) * xa4
     + +w2(5,2) * xa5
     + +w2(6,2) * xa6
     + +w2(7,2) * xa7)
     + * yf12
      xb3 = (w2(1,3) * xa1
     + +w2(2,3) * xa2
     + +w2(3,3) * xa3
     + +w2(4,3) * xa4
     + +w2(5,3) * xa5
     + +w2(6,3) * xa6
     + +w2(7,3) * xa7)
     + * yf13
      xb4 = (w2(1,4) * xa1
     + +w2(2,4) * xa2
     + +w2(3,4) * xa3
     + +w2(4,4) * xa4
     + +w2(5,4) * xa5
     + +w2(6,4) * xa6
     + +w2(7,4) * xa7)
     + * yf14
      xb5 = (w2(1,5) * xa1
     + +w2(2,5) * xa2
     + +w2(3,5) * xa3
     + +w2(4,5) * xa4
     + +w2(5,5) * xa5
     + +w2(6,5) * xa6
     + +w2(7,5) * xa7)
     + * yf15
      xb6 = (w2(1,6) * xa1
     + +w2(2,6) * xa2
     + +w2(3,6) * xa3
     + +w2(4,6) * xa4
     + +w2(5,6) * xa5
     + +w2(6,6) * xa6
     + +w2(7,6) * xa7)
     + * yf16
      xb7 = (w2(1,7) * xa1
     + +w2(2,7) * xa2
     + +w2(3,7) * xa3
     + +w2(4,7) * xa4
     + +w2(5,7) * xa5
     + +w2(6,7) * xa6
     + +w2(7,7) * xa7)
     + * yf17
      xb8 = (w2(1,8) * xa1
     + +w2(2,8) * xa2
     + +w2(3,8) * xa3
     + +w2(4,8) * xa4
     + +w2(5,8) * xa5
     + +w2(6,8) * xa6
     + +w2(7,8) * xa7)
     + * yf18
      xb9 = (w2(1,9) * xa1
     + +w2(2,9) * xa2
     + +w2(3,9) * xa3
     + +w2(4,9) * xa4
     + +w2(5,9) * xa5
     + +w2(6,9) * xa6
     + +w2(7,9) * xa7)
     + * yf19
      xb10 = (w2(1,10) * xa1
     + +w2(2,10) * xa2
     + +w2(3,10) * xa3
     + +w2(4,10) * xa4
     + +w2(5,10) * xa5
     + +w2(6,10) * xa6
     + +w2(7,10) * xa7)
     + * yf110
      xb11 = (w2(1,11) * xa1
     + +w2(2,11) * xa2
     + +w2(3,11) * xa3
     + +w2(4,11) * xa4
     + +w2(5,11) * xa5
     + +w2(6,11) * xa6
     + +w2(7,11) * xa7)
     + * yf111
      xb12 = (w2(1,12) * xa1
     + +w2(2,12) * xa2
     + +w2(3,12) * xa3
     + +w2(4,12) * xa4
     + +w2(5,12) * xa5
     + +w2(6,12) * xa6
     + +w2(7,12) * xa7)
     + * yf112
      xb13 = (w2(1,13) * xa1
     + +w2(2,13) * xa2
     + +w2(3,13) * xa3
     + +w2(4,13) * xa4
     + +w2(5,13) * xa5
     + +w2(6,13) * xa6
     + +w2(7,13) * xa7)
     + * yf113
      xb14 = (w2(1,14) * xa1
     + +w2(2,14) * xa2
     + +w2(3,14) * xa3
     + +w2(4,14) * xa4
     + +w2(5,14) * xa5
     + +w2(6,14) * xa6
     + +w2(7,14) * xa7)
     + * yf114
      xb15 = (w2(1,15) * xa1
     + +w2(2,15) * xa2
     + +w2(3,15) * xa3
     + +w2(4,15) * xa4
     + +w2(5,15) * xa5
     + +w2(6,15) * xa6
     + +w2(7,15) * xa7)
     + * yf115
C Outputs of the subroutine
      Yield(k) = xrO * (w3(1) * yf21
     + +w3(2) * yf22
     + +w3(3) * yf23
     + +w3(4) * yf24
     + +w3(5) * yf25
     + +w3(6) * yf26
     + +w3(7) * yf27
     + +b3)
     + +xmO
      dyieldDeqps(k,1) = xrO * (w1(1,1) * xb1
     + +w1(2,1) * xb2
     + +w1(3,1) * xb3
     + +w1(4,1) * xb4
     + +w1(5,1) * xb5
     + +w1(6,1) * xb6
     + +w1(7,1) * xb7
     + +w1(8,1) * xb8
     + +w1(9,1) * xb9
     + +w1(10,1) * xb10
     + +w1(11,1) * xb11
     + +w1(12,1) * xb12
     + +w1(13,1) * xb13
     + +w1(14,1) * xb14
     + +w1(15,1) * xb15) / xrI(1)
      dyieldDeqps(k,2) = xrO * (w1(1,2) * xb1
     + +w1(2,2) * xb2
     + +w1(3,2) * xb3
     + +w1(4,2) * xb4
     + +w1(5,2) * xb5
     + +w1(6,2) * xb6
     + +w1(7,2) * xb7
     + +w1(8,2) * xb8
     + +w1(9,2) * xb9
     + +w1(10,2) * xb10
     + +w1(11,2) * xb11
     + +w1(12,2) * xb12
     + +w1(13,2) * xb13
     + +w1(14,2) * xb14
     + +w1(15,2) * xb15)
     + /(xrI(2)*eqpsRate(k))
      dyieldDtemp(k) = xrO * (w1(1,3) * xb1
     + +w1(2,3) * xb2
     + +w1(3,3) * xb3
     + +w1(4,3) * xb4
     + +w1(5,3) * xb5
     + +w1(6,3) * xb6
     + +w1(7,3) * xb7
     + +w1(8,3) * xb8
     + +w1(9,3) * xb9
     + +w1(10,3) * xb10
     + +w1(11,3) * xb11
     + +w1(12,3) * xb12
     + +w1(13,3) * xb13
     + +w1(14,3) * xb14
     + +w1(15,3) * xb15) / xrI(3)
C Store the eqpsRate into stateNew variable 1
      stateNew(k,1) = eqpsRate(k)
      end do
C Return from the VUHARD subroutine
      return
      end
