C **********************************************************************
C Function to compute the ANN : 3Cr2Mo-3-15-7-1-sigmoid yield stress
C **********************************************************************
      subroutine vuhard (
C Read only -
     +  nblock, nElement, nIntPt, nLayer, nSecPt, lAnneal, stepTime,
     +  totalTime, dt, cmname, nstatev, nfieldv, nprops, props,
     +  tempOld, tempNew, fieldOld, fieldNew, stateOld, eqps, eqpsRate,
C Write only -
     +  yield, dyieldDtemp, dyieldDeqps, stateNew)
C
      include 'vaba_param.inc'
C
      dimension nElement(nblock), props(nprops), tempOld(nblock),
     +  fieldOld(nblock,nfieldv), stateOld(nblock,nstatev),
     +  tempNew(nblock), fieldNew(nblock,nfieldv), eqps(nblock),
     +  eqpsRate(nblock), yield(nblock), dyieldDtemp(nblock),
     +  dyieldDeqps(nblock,2), stateNew(nblock,nstatev)
C
      character*80 cmname
C Block of Data
      double precision w1(15, 3)
      data w1/1.4223304766649756D0,
     + -2.9951041659584825D0,
     + -0.0175826263332437D0,
     + 0.181422964898548D0,
     + 0.9690976995751865D0,
     + -5.9509879286026717D0,
     + -8.9493225534319727D0,
     + -3.6771970692139058D0,
     + -213.8263657993060178D0,
     + 3.4842761660474295D0,
     + -7.6088092490454224D0,
     + -0.0071262962335022D0,
     + 24.191252450788614D0,
     + 10.3161115812068775D0,
     + -0.2817043966005921D0,
     + 1.1406990276952407D0,
     + 1.6805588419946296D0,
     + 4.2610336761931293D0,
     + -0.9789792803794634D0,
     + 3.7895666181313268D0,
     + 5.1009226812217605D0,
     + 9.8622429592286682D0,
     + 24.3150017024563496D0,
     + 1.4783731214911497D0,
     + 2.6393753433327851D0,
     + 0.5737838742682455D0,
     + 4.5134211440518683D0,
     + -2.4181066746629489D0,
     + 2.4504430906909009D0,
     + 7.00765448460242D0,
     + -2.8488640243501995D0,
     + 1.1829114503230322D0,
     + -3.5180905381558518D0,
     + -2.2713002464458643D0,
     + -1.1842379386811526D0,
     + -7.617879926463452D0,
     + -2.4078231587940593D0,
     + 17.6597763574051676D0,
     + -0.9280491762785759D0,
     + -8.1905002967568006D0,
     + -0.9233080740153735D0,
     + -7.6393762891242689D0,
     + 0.7844940317676407D0,
     + 1.3777054207261845D0,
     + -0.8308370709953141D0/
      double precision b1(15)
      data b1/0.9356754447387789D0,
     + -0.305810961699766D0,
     + -4.4089295794934857D0,
     + 0.8503348522742081D0,
     + -4.6066673380563836D0,
     + -4.0046902919301797D0,
     + 2.3021882432044514D0,
     + -12.4529472574301092D0,
     + -2.1757895181591285D0,
     + -1.2839313606472675D0,
     + 0.0480204687896956D0,
     + -2.1446312747017866D0,
     + 0.9121643515145773D0,
     + -2.4041164712274381D0,
     + -4.7034948113778547D0/
      double precision w2(7, 15)
      data w2/0.3009884938336452D0,
     + 0.2561019226792181D0,
     + 0.9740695163954683D0,
     + -0.2823984006002822D0,
     + -0.1099308250880837D0,
     + -1.339010486090215D0,
     + -1.1690937624953828D0,
     + -1.2232615393664352D0,
     + -4.7079548601942918D0,
     + 0.071138916075958D0,
     + -1.9932025637880786D0,
     + 1.1874529540448644D0,
     + -0.8431640842602032D0,
     + 0.135514756343318D0,
     + -2.1288166703438067D0,
     + -5.2025807685164009D0,
     + 0.4672024269368161D0,
     + -1.5360128417969794D0,
     + 2.9437711791363177D0,
     + -1.8681217967846859D0,
     + -0.0416596019257911D0,
     + 0.100174658207373D0,
     + -0.3118522923674814D0,
     + 0.2390262676166186D0,
     + -1.4626867133804167D0,
     + 2.6722997729492466D0,
     + -1.4525467152572313D0,
     + -0.4408340666034111D0,
     + 2.4131628758659089D0,
     + -7.643433994767844D0,
     + 9.9716205319486608D0,
     + -1.8318514256304399D0,
     + -4.5595470117786645D0,
     + -3.553164101681459D0,
     + -2.4081023846000531D0,
     + 1.3524059270790603D0,
     + -2.8785597189558771D0,
     + -3.0066729947329227D0,
     + 2.8444086720310886D0,
     + -1.0610559409688989D0,
     + 0.2546974350247921D0,
     + 1.6136301528293737D0,
     + -0.6993126398485138D0,
     + -0.5688416754642009D0,
     + 0.5416231823782658D0,
     + -0.6298462641421935D0,
     + -1.0525192296646264D0,
     + 0.2846207162965367D0,
     + 1.3844759352410181D0,
     + -0.9410149574303157D0,
     + -0.1131135746564537D0,
     + 1.1827457551532548D0,
     + 0.4669607800171198D0,
     + -1.0838802887977104D0,
     + 1.1386161528691423D0,
     + 0.3771870926113439D0,
     + 3.2378836083015488D0,
     + -5.1690542811545326D0,
     + -12.7742759040417493D0,
     + -12.2719717820026659D0,
     + 2.7757081657895233D0,
     + 0.4132678624059665D0,
     + -0.0298673456296199D0,
     + -0.9095432598110492D0,
     + -0.3868219595627737D0,
     + -0.3933562739527355D0,
     + -1.5480958466193444D0,
     + 0.0776547346845448D0,
     + -0.0519605006699283D0,
     + -1.5098165737838911D0,
     + -3.8877320579979142D0,
     + -0.7866644469621153D0,
     + -0.5576460496411128D0,
     + 1.6007004874437496D0,
     + 1.9025262545572597D0,
     + 1.3835733754885873D0,
     + 2.6384424727951816D0,
     + 2.4411986784382318D0,
     + 3.2835012794731471D0,
     + 2.1690545043846101D0,
     + -1.1027335505366134D0,
     + 0.2863860932642046D0,
     + 0.5380829935269795D0,
     + -0.2572834190566707D0,
     + 1.2124537815879759D0,
     + -0.3172434540379789D0,
     + 1.5499285173744399D0,
     + 1.7176196746901027D0,
     + 0.0928942499725952D0,
     + -0.9777752463798645D0,
     + -6.5990222209633851D0,
     + -1.1470754585948106D0,
     + -1.2207431536560083D0,
     + -0.5146696433177588D0,
     + -0.077046557701285D0,
     + 0.8002198389230151D0,
     + 0.0537750183744835D0,
     + -2.9706393164184881D0,
     + 1.5168843144092712D0,
     + 4.1848174841321155D0,
     + 0.3358507756475496D0,
     + -1.3671217675566738D0,
     + -3.3752812515786554D0,
     + 1.116594310015238D0,
     + -0.1896951509795906D0/
      double precision b2(7)
      data b2/-1.0901941978432403D0,
     + -0.858512384676591D0,
     + -0.2014715151507075D0,
     + 0.6072302538798565D0,
     + -1.1527638202614232D0,
     + -0.1330146297290639D0,
     + -0.7223105834352912D0/
      double precision w3(7)
      data w3/0.621261310888534D0,
     + -1.5705658777939286D0,
     + 0.7021769732642688D0,
     + -0.3136926915487244D0,
     + -0.366175421680959D0,
     + -0.5176414760004816D0,
     + -1.9302397743366571D0/
      double precision b3
      data b3/-0.0323842975983559D0/
      double precision xmI(3)
      data xmI/0D0,
     + 0D0,
     + 1050D0/
      double precision xrI(3)
      data xrI/0.7D0,
     + 8.5171931914162382D0,
     + 200D0/
      double precision xmO
      data xmO/0.03016674D0/
      double precision xrO
      data xrO/153.709333259999994D0/
      double precision xdeps0
      data xdeps0/0.001D0/
C Do the main loop for all block values
      do k = 1, nblock
C Preprocessing of the variables
      xeps = (eqps(k) - xmI(1))/xrI(1)
      if (eqpsRate(k) > xdeps0) then
        xdeps = (log(eqpsRate(k)/xdeps0) - xmI(2))/xrI(2)
      else
        xdeps = 0
        eqpsRate(k) = xdeps0
      endif
      xtemp = (tempNew(k) - xmI(3))/xrI(3)
C Hidden layer #1 - (y11 to y115)
      y11 = w1(1,1) * xeps
     + +w1(1,2) * xdeps
     + +w1(1,3) * xtemp
     + +b1(1)
      y12 = w1(2,1) * xeps
     + +w1(2,2) * xdeps
     + +w1(2,3) * xtemp
     + +b1(2)
      y13 = w1(3,1) * xeps
     + +w1(3,2) * xdeps
     + +w1(3,3) * xtemp
     + +b1(3)
      y14 = w1(4,1) * xeps
     + +w1(4,2) * xdeps
     + +w1(4,3) * xtemp
     + +b1(4)
      y15 = w1(5,1) * xeps
     + +w1(5,2) * xdeps
     + +w1(5,3) * xtemp
     + +b1(5)
      y16 = w1(6,1) * xeps
     + +w1(6,2) * xdeps
     + +w1(6,3) * xtemp
     + +b1(6)
      y17 = w1(7,1) * xeps
     + +w1(7,2) * xdeps
     + +w1(7,3) * xtemp
     + +b1(7)
      y18 = w1(8,1) * xeps
     + +w1(8,2) * xdeps
     + +w1(8,3) * xtemp
     + +b1(8)
      y19 = w1(9,1) * xeps
     + +w1(9,2) * xdeps
     + +w1(9,3) * xtemp
     + +b1(9)
      y110 = w1(10,1) * xeps
     + +w1(10,2) * xdeps
     + +w1(10,3) * xtemp
     + +b1(10)
      y111 = w1(11,1) * xeps
     + +w1(11,2) * xdeps
     + +w1(11,3) * xtemp
     + +b1(11)
      y112 = w1(12,1) * xeps
     + +w1(12,2) * xdeps
     + +w1(12,3) * xtemp
     + +b1(12)
      y113 = w1(13,1) * xeps
     + +w1(13,2) * xdeps
     + +w1(13,3) * xtemp
     + +b1(13)
      y114 = w1(14,1) * xeps
     + +w1(14,2) * xdeps
     + +w1(14,3) * xtemp
     + +b1(14)
      y115 = w1(15,1) * xeps
     + +w1(15,2) * xdeps
     + +w1(15,3) * xtemp
     + +b1(15)
C sigmoid activation function - (yf11 to yf115)
      yf11 = 1/(1 + exp(-y11))
      yf12 = 1/(1 + exp(-y12))
      yf13 = 1/(1 + exp(-y13))
      yf14 = 1/(1 + exp(-y14))
      yf15 = 1/(1 + exp(-y15))
      yf16 = 1/(1 + exp(-y16))
      yf17 = 1/(1 + exp(-y17))
      yf18 = 1/(1 + exp(-y18))
      yf19 = 1/(1 + exp(-y19))
      yf110 = 1/(1 + exp(-y110))
      yf111 = 1/(1 + exp(-y111))
      yf112 = 1/(1 + exp(-y112))
      yf113 = 1/(1 + exp(-y113))
      yf114 = 1/(1 + exp(-y114))
      yf115 = 1/(1 + exp(-y115))
C Hidden layer #2 - (y21 to y27)
      y21 = w2(1,1) * yf11
     + +w2(1,2) * yf12
     + +w2(1,3) * yf13
     + +w2(1,4) * yf14
     + +w2(1,5) * yf15
     + +w2(1,6) * yf16
     + +w2(1,7) * yf17
     + +w2(1,8) * yf18
     + +w2(1,9) * yf19
     + +w2(1,10) * yf110
     + +w2(1,11) * yf111
     + +w2(1,12) * yf112
     + +w2(1,13) * yf113
     + +w2(1,14) * yf114
     + +w2(1,15) * yf115
     + +b2(1)
      y22 = w2(2,1) * yf11
     + +w2(2,2) * yf12
     + +w2(2,3) * yf13
     + +w2(2,4) * yf14
     + +w2(2,5) * yf15
     + +w2(2,6) * yf16
     + +w2(2,7) * yf17
     + +w2(2,8) * yf18
     + +w2(2,9) * yf19
     + +w2(2,10) * yf110
     + +w2(2,11) * yf111
     + +w2(2,12) * yf112
     + +w2(2,13) * yf113
     + +w2(2,14) * yf114
     + +w2(2,15) * yf115
     + +b2(2)
      y23 = w2(3,1) * yf11
     + +w2(3,2) * yf12
     + +w2(3,3) * yf13
     + +w2(3,4) * yf14
     + +w2(3,5) * yf15
     + +w2(3,6) * yf16
     + +w2(3,7) * yf17
     + +w2(3,8) * yf18
     + +w2(3,9) * yf19
     + +w2(3,10) * yf110
     + +w2(3,11) * yf111
     + +w2(3,12) * yf112
     + +w2(3,13) * yf113
     + +w2(3,14) * yf114
     + +w2(3,15) * yf115
     + +b2(3)
      y24 = w2(4,1) * yf11
     + +w2(4,2) * yf12
     + +w2(4,3) * yf13
     + +w2(4,4) * yf14
     + +w2(4,5) * yf15
     + +w2(4,6) * yf16
     + +w2(4,7) * yf17
     + +w2(4,8) * yf18
     + +w2(4,9) * yf19
     + +w2(4,10) * yf110
     + +w2(4,11) * yf111
     + +w2(4,12) * yf112
     + +w2(4,13) * yf113
     + +w2(4,14) * yf114
     + +w2(4,15) * yf115
     + +b2(4)
      y25 = w2(5,1) * yf11
     + +w2(5,2) * yf12
     + +w2(5,3) * yf13
     + +w2(5,4) * yf14
     + +w2(5,5) * yf15
     + +w2(5,6) * yf16
     + +w2(5,7) * yf17
     + +w2(5,8) * yf18
     + +w2(5,9) * yf19
     + +w2(5,10) * yf110
     + +w2(5,11) * yf111
     + +w2(5,12) * yf112
     + +w2(5,13) * yf113
     + +w2(5,14) * yf114
     + +w2(5,15) * yf115
     + +b2(5)
      y26 = w2(6,1) * yf11
     + +w2(6,2) * yf12
     + +w2(6,3) * yf13
     + +w2(6,4) * yf14
     + +w2(6,5) * yf15
     + +w2(6,6) * yf16
     + +w2(6,7) * yf17
     + +w2(6,8) * yf18
     + +w2(6,9) * yf19
     + +w2(6,10) * yf110
     + +w2(6,11) * yf111
     + +w2(6,12) * yf112
     + +w2(6,13) * yf113
     + +w2(6,14) * yf114
     + +w2(6,15) * yf115
     + +b2(6)
      y27 = w2(7,1) * yf11
     + +w2(7,2) * yf12
     + +w2(7,3) * yf13
     + +w2(7,4) * yf14
     + +w2(7,5) * yf15
     + +w2(7,6) * yf16
     + +w2(7,7) * yf17
     + +w2(7,8) * yf18
     + +w2(7,9) * yf19
     + +w2(7,10) * yf110
     + +w2(7,11) * yf111
     + +w2(7,12) * yf112
     + +w2(7,13) * yf113
     + +w2(7,14) * yf114
     + +w2(7,15) * yf115
     + +b2(7)
C sigmoid activation function - (yf21 to yf27)
      yf21 = 1/(1 + exp(-y21))
      yf22 = 1/(1 + exp(-y22))
      yf23 = 1/(1 + exp(-y23))
      yf24 = 1/(1 + exp(-y24))
      yf25 = 1/(1 + exp(-y25))
      yf26 = 1/(1 + exp(-y26))
      yf27 = 1/(1 + exp(-y27))
C Derivatives terms - (xa1 to xa7) and (xb1 to xb15)
      xa1 = w3(1) * (yf21*(1 - yf21))
      xa2 = w3(2) * (yf22*(1 - yf22))
      xa3 = w3(3) * (yf23*(1 - yf23))
      xa4 = w3(4) * (yf24*(1 - yf24))
      xa5 = w3(5) * (yf25*(1 - yf25))
      xa6 = w3(6) * (yf26*(1 - yf26))
      xa7 = w3(7) * (yf27*(1 - yf27))
      xb1 = (w2(1,1) * xa1
     + +w2(2,1) * xa2
     + +w2(3,1) * xa3
     + +w2(4,1) * xa4
     + +w2(5,1) * xa5
     + +w2(6,1) * xa6
     + +w2(7,1) * xa7)
     + * (yf11*(1 - yf11))
      xb2 = (w2(1,2) * xa1
     + +w2(2,2) * xa2
     + +w2(3,2) * xa3
     + +w2(4,2) * xa4
     + +w2(5,2) * xa5
     + +w2(6,2) * xa6
     + +w2(7,2) * xa7)
     + * (yf12*(1 - yf12))
      xb3 = (w2(1,3) * xa1
     + +w2(2,3) * xa2
     + +w2(3,3) * xa3
     + +w2(4,3) * xa4
     + +w2(5,3) * xa5
     + +w2(6,3) * xa6
     + +w2(7,3) * xa7)
     + * (yf13*(1 - yf13))
      xb4 = (w2(1,4) * xa1
     + +w2(2,4) * xa2
     + +w2(3,4) * xa3
     + +w2(4,4) * xa4
     + +w2(5,4) * xa5
     + +w2(6,4) * xa6
     + +w2(7,4) * xa7)
     + * (yf14*(1 - yf14))
      xb5 = (w2(1,5) * xa1
     + +w2(2,5) * xa2
     + +w2(3,5) * xa3
     + +w2(4,5) * xa4
     + +w2(5,5) * xa5
     + +w2(6,5) * xa6
     + +w2(7,5) * xa7)
     + * (yf15*(1 - yf15))
      xb6 = (w2(1,6) * xa1
     + +w2(2,6) * xa2
     + +w2(3,6) * xa3
     + +w2(4,6) * xa4
     + +w2(5,6) * xa5
     + +w2(6,6) * xa6
     + +w2(7,6) * xa7)
     + * (yf16*(1 - yf16))
      xb7 = (w2(1,7) * xa1
     + +w2(2,7) * xa2
     + +w2(3,7) * xa3
     + +w2(4,7) * xa4
     + +w2(5,7) * xa5
     + +w2(6,7) * xa6
     + +w2(7,7) * xa7)
     + * (yf17*(1 - yf17))
      xb8 = (w2(1,8) * xa1
     + +w2(2,8) * xa2
     + +w2(3,8) * xa3
     + +w2(4,8) * xa4
     + +w2(5,8) * xa5
     + +w2(6,8) * xa6
     + +w2(7,8) * xa7)
     + * (yf18*(1 - yf18))
      xb9 = (w2(1,9) * xa1
     + +w2(2,9) * xa2
     + +w2(3,9) * xa3
     + +w2(4,9) * xa4
     + +w2(5,9) * xa5
     + +w2(6,9) * xa6
     + +w2(7,9) * xa7)
     + * (yf19*(1 - yf19))
      xb10 = (w2(1,10) * xa1
     + +w2(2,10) * xa2
     + +w2(3,10) * xa3
     + +w2(4,10) * xa4
     + +w2(5,10) * xa5
     + +w2(6,10) * xa6
     + +w2(7,10) * xa7)
     + * (yf110*(1 - yf110))
      xb11 = (w2(1,11) * xa1
     + +w2(2,11) * xa2
     + +w2(3,11) * xa3
     + +w2(4,11) * xa4
     + +w2(5,11) * xa5
     + +w2(6,11) * xa6
     + +w2(7,11) * xa7)
     + * (yf111*(1 - yf111))
      xb12 = (w2(1,12) * xa1
     + +w2(2,12) * xa2
     + +w2(3,12) * xa3
     + +w2(4,12) * xa4
     + +w2(5,12) * xa5
     + +w2(6,12) * xa6
     + +w2(7,12) * xa7)
     + * (yf112*(1 - yf112))
      xb13 = (w2(1,13) * xa1
     + +w2(2,13) * xa2
     + +w2(3,13) * xa3
     + +w2(4,13) * xa4
     + +w2(5,13) * xa5
     + +w2(6,13) * xa6
     + +w2(7,13) * xa7)
     + * (yf113*(1 - yf113))
      xb14 = (w2(1,14) * xa1
     + +w2(2,14) * xa2
     + +w2(3,14) * xa3
     + +w2(4,14) * xa4
     + +w2(5,14) * xa5
     + +w2(6,14) * xa6
     + +w2(7,14) * xa7)
     + * (yf114*(1 - yf114))
      xb15 = (w2(1,15) * xa1
     + +w2(2,15) * xa2
     + +w2(3,15) * xa3
     + +w2(4,15) * xa4
     + +w2(5,15) * xa5
     + +w2(6,15) * xa6
     + +w2(7,15) * xa7)
     + * (yf115*(1 - yf115))
C Outputs of the subroutine
      Yield(k) = xrO * (w3(1) * yf21
     + +w3(2) * yf22
     + +w3(3) * yf23
     + +w3(4) * yf24
     + +w3(5) * yf25
     + +w3(6) * yf26
     + +w3(7) * yf27
     + +b3)
     + +xmO
      dyieldDeqps(k,1) = xrO * (w1(1,1) * xb1
     + +w1(2,1) * xb2
     + +w1(3,1) * xb3
     + +w1(4,1) * xb4
     + +w1(5,1) * xb5
     + +w1(6,1) * xb6
     + +w1(7,1) * xb7
     + +w1(8,1) * xb8
     + +w1(9,1) * xb9
     + +w1(10,1) * xb10
     + +w1(11,1) * xb11
     + +w1(12,1) * xb12
     + +w1(13,1) * xb13
     + +w1(14,1) * xb14
     + +w1(15,1) * xb15) / xrI(1)
      dyieldDeqps(k,2) = xrO * (w1(1,2) * xb1
     + +w1(2,2) * xb2
     + +w1(3,2) * xb3
     + +w1(4,2) * xb4
     + +w1(5,2) * xb5
     + +w1(6,2) * xb6
     + +w1(7,2) * xb7
     + +w1(8,2) * xb8
     + +w1(9,2) * xb9
     + +w1(10,2) * xb10
     + +w1(11,2) * xb11
     + +w1(12,2) * xb12
     + +w1(13,2) * xb13
     + +w1(14,2) * xb14
     + +w1(15,2) * xb15)
     + /(xrI(2)*eqpsRate(k))
      dyieldDtemp(k) = xrO * (w1(1,3) * xb1
     + +w1(2,3) * xb2
     + +w1(3,3) * xb3
     + +w1(4,3) * xb4
     + +w1(5,3) * xb5
     + +w1(6,3) * xb6
     + +w1(7,3) * xb7
     + +w1(8,3) * xb8
     + +w1(9,3) * xb9
     + +w1(10,3) * xb10
     + +w1(11,3) * xb11
     + +w1(12,3) * xb12
     + +w1(13,3) * xb13
     + +w1(14,3) * xb14
     + +w1(15,3) * xb15) / xrI(3)
C Store the eqpsRate into stateNew variable 1
      stateNew(k,1) = eqpsRate(k)
      end do
C Return from the VUHARD subroutine
      return
      end
