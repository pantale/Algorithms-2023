C **********************************************************************
C Function to compute the ANN : 3Cr2Mo-3-17-9-1-exponential yield stress
C **********************************************************************
      subroutine vuhard (
C Read only -
     +  nblock, nElement, nIntPt, nLayer, nSecPt, lAnneal, stepTime,
     +  totalTime, dt, cmname, nstatev, nfieldv, nprops, props,
     +  tempOld, tempNew, fieldOld, fieldNew, stateOld, eqps, eqpsRate,
C Write only -
     +  yield, dyieldDtemp, dyieldDeqps, stateNew)
C
      include 'vaba_param.inc'
C
      dimension nElement(nblock), props(nprops), tempOld(nblock),
     +  fieldOld(nblock,nfieldv), stateOld(nblock,nstatev),
     +  tempNew(nblock), fieldNew(nblock,nfieldv), eqps(nblock),
     +  eqpsRate(nblock), yield(nblock), dyieldDtemp(nblock),
     +  dyieldDeqps(nblock,2), stateNew(nblock,nstatev)
C
      character*80 cmname
C Block of Data
      double precision w1(17, 3)
      data w1/-18.005151041076001D0,
     + -2.1260391826631762D0,
     + -2.150871965859027D0,
     + -0.8321546516389274D0,
     + 1.3484584828193746D0,
     + -0.3965444915070137D0,
     + -8.6459024159675408D0,
     + 0.8353395706677375D0,
     + 0.3623841988807998D0,
     + -6.7816413008265579D0,
     + -0.3857026121169247D0,
     + -0.029533127818103D0,
     + 1.4876185870704857D0,
     + -10.993390782261752D0,
     + -2.4387803548738773D0,
     + -280.7866794296163562D0,
     + -3.5384791529398312D0,
     + 1.2500173824457874D0,
     + 0.8293944800404437D0,
     + 4.8817662515562885D0,
     + -4.701917317641346D0,
     + 1.2587305149542412D0,
     + 2.7977906561297505D0,
     + -5.5290252066700356D0,
     + 3.750561248508641D0,
     + 0.1183221317746587D0,
     + 1.0906737966177549D0,
     + 0.7935303489496823D0,
     + -4.0235682760366229D0,
     + -2.3713515296112555D0,
     + -8.2947932131628548D0,
     + -0.7568678483080776D0,
     + 1.1758173390221873D0,
     + -2.7794252550845524D0,
     + -1.3419172446353176D0,
     + -4.838379619715103D0,
     + -1.1100394875782207D0,
     + 0.8884931646741642D0,
     + -1.4292726291268931D0,
     + 0.7095869518499307D0,
     + -3.9156227341525085D0,
     + -37.5223698819157292D0,
     + 8.2109975747992419D0,
     + 0.3186461753218063D0,
     + -1.9339778604761411D0,
     + 0.7734767129807796D0,
     + 4.1472202088812464D0,
     + -12.1636389482255556D0,
     + -0.322636620320326D0,
     + -0.0898222701027275D0,
     + -19.796380924453441D0/
      double precision b1(17)
      data b1/-0.6101889190870319D0,
     + -2.2370668988455349D0,
     + -4.0402088127868065D0,
     + 1.1343202402563863D0,
     + -3.0541988085916034D0,
     + -3.4783610146258139D0,
     + 1.5009301909058987D0,
     + -5.8377777609120738D0,
     + -8.602401928762001D0,
     + -1.2453982924139635D0,
     + -1.5560172212144388D0,
     + 0.7384422808458073D0,
     + -5.3349331060025618D0,
     + 2.2084308844617562D0,
     + -0.6288399705987571D0,
     + -1.6191837711468577D0,
     + -0.0795664379635543D0/
      double precision w2(9, 17)
      data w2/0.1334755694066737D0,
     + -86.9458999116183691D0,
     + -1.0509227467850093D0,
     + 1.8029247320643482D0,
     + -1.8499598740654737D0,
     + -0.4397167764035476D0,
     + -7.1271746719268574D0,
     + 0.1740776355020412D0,
     + -0.3404600671023031D0,
     + 7.0827762402784868D0,
     + -20.3593681038884498D0,
     + 4.7342650969127664D0,
     + 2.6425774282990182D0,
     + 1.0945622569288809D0,
     + -0.0231412204200198D0,
     + -27.7145819577211476D0,
     + -0.822381250023741D0,
     + -0.6481362799202681D0,
     + -4.2696694240615694D0,
     + -42.8331344361417194D0,
     + -1.8279625296260817D0,
     + -0.5369914254212652D0,
     + 0.7056866571385211D0,
     + 0.3112714359343947D0,
     + -52.8112062027283002D0,
     + 0.8500331919277437D0,
     + -0.0991142940324825D0,
     + -4.289936049740259D0,
     + 2.2431627518301815D0,
     + -30.3747614236778212D0,
     + 0.0536947288969655D0,
     + 1.1640843079337533D0,
     + -1.6429249141152806D0,
     + -1.8623834159667751D0,
     + 0.986791480134137D0,
     + -1.0238248203009053D0,
     + -9.3789565757728948D0,
     + -2.7730804193341219D0,
     + 0.5832184961486895D0,
     + -3.3964238564103861D0,
     + -7.2410954956062161D0,
     + -1.7764886873171926D0,
     + -13.4717417960006305D0,
     + 0.5362109295050506D0,
     + -2.7694842881801502D0,
     + -8.4348243955961877D0,
     + -8.2153882696482246D0,
     + 1.7441777503526443D0,
     + 0.018819754422483D0,
     + 2.2419545302694042D0,
     + 0.0893388512661016D0,
     + -15.297519655939448D0,
     + -2.3816760709989873D0,
     + -6.0796741198226645D0,
     + 8.0498441848284372D0,
     + -3.0322125463767429D0,
     + -10.0942502779554477D0,
     + 0.1640478856716286D0,
     + -3.5507697421683369D0,
     + -0.0902856570114582D0,
     + 4.4306547580464075D0,
     + -1.9374507312975207D0,
     + 3.0753265611665563D0,
     + -33.1933771241092614D0,
     + -1.8463659362865497D0,
     + -2.2929951344750634D0,
     + -2.6179735098420664D0,
     + 16.3969738417007882D0,
     + -1.0254872266950674D0,
     + -2.8277406888945928D0,
     + 1.2938895742830601D0,
     + 6.3190979566917642D0,
     + 2.1135150892076755D0,
     + 1.3887431688553773D0,
     + -0.9867930869793078D0,
     + -0.0897977687353479D0,
     + -1.8187348714903955D0,
     + -0.0973623375918144D0,
     + 2.5076935481996028D0,
     + 0.6869395127767457D0,
     + 0.8782041284921968D0,
     + -2.2142495071770152D0,
     + -14.3174250696291541D0,
     + -2.0554315174769773D0,
     + 0.3872889541841034D0,
     + 1.0965325443780927D0,
     + -0.7120780210167367D0,
     + 8.2269980070343074D0,
     + -3.941976847646492D0,
     + -1.9300378077774825D0,
     + -13.3510266709673946D0,
     + 1.7427695804802281D0,
     + 3.9242896804489411D0,
     + -5.3548446979333475D0,
     + -6.4997314721204109D0,
     + 1.0882166234611712D0,
     + 3.1486603945625706D0,
     + -1.5256263551786668D0,
     + -0.6133062413937388D0,
     + -2.8443553428279129D0,
     + -3.4119569070866294D0,
     + -11.8836893399464536D0,
     + 0.0327630852054537D0,
     + -2.4746674879046688D0,
     + -1.3871834271259056D0,
     + 2.2612712983195333D0,
     + -1.7872675133214859D0,
     + -0.3003620382764858D0,
     + -13.5988060725439635D0,
     + -5.8329532311614987D0,
     + 8.6601283489121652D0,
     + 0.09154492505692D0,
     + -4.3166914938919785D0,
     + 1.4826746857695814D0,
     + -14.671414461316461D0,
     + -5.8687944598524453D0,
     + 1.144178899204124D0,
     + -23.5976098622556023D0,
     + 0.2608130434767405D0,
     + 18.1279379359486157D0,
     + -0.0312392147200373D0,
     + -2.7160926726905914D0,
     + -0.3738776777963329D0,
     + -72.26305559910179D0,
     + 0.564836237508754D0,
     + -1.0626548500655166D0,
     + 2.9876818671718874D0,
     + -3.5101958569734446D0,
     + 5.437095490560881D0,
     + -1.1661740655471504D0,
     + -7.7614523119321692D0,
     + 2.7461489835447908D0,
     + 3.3289639804804909D0,
     + -2.3478283062992884D0,
     + -0.4588192673299356D0,
     + -0.5258736395366448D0,
     + -14.8703400385353D0,
     + 6.4575394453255575D0,
     + 0.0360112462439145D0,
     + 8.9385609468540217D0,
     + -0.6585005097431724D0,
     + -12.1824981944632142D0,
     + -37.3384838340833483D0,
     + 13.0560762275235245D0,
     + 11.9092340402023975D0,
     + 4.1775456573077063D0,
     + -9.256775834575766D0,
     + -0.1699418190957353D0,
     + 6.7481710854278276D0,
     + 0.4154590906716781D0,
     + 3.3279536933700804D0,
     + 1.9918415672482277D0,
     + -1.8800123067838272D0/
      double precision b2(9)
      data b2/1.8698306540577176D0,
     + -0.2403589079177718D0,
     + -2.206752620226565D0,
     + -2.723941910305927D0,
     + -6.8947224961155564D0,
     + -2.2587708132400919D0,
     + -4.6671101625893616D0,
     + -1.2523547096110172D0,
     + -5.0382618105498551D0/
      double precision w3(9)
      data w3/-4.1279487705332736D0,
     + -3.0153936240061596D0,
     + 1.5208788737936143D0,
     + -2.321759903268235D0,
     + -1.3243433752147176D0,
     + 1.6327529944333343D0,
     + -3.1745810891262054D0,
     + 2.4543666658169734D0,
     + -3.1346204877770645D0/
      double precision b3
      data b3/0.2420556297426966D0/
      double precision xmI(3)
      data xmI/0D0,
     + 0D0,
     + 1050D0/
      double precision xrI(3)
      data xrI/0.7D0,
     + 8.5171931914162382D0,
     + 200D0/
      double precision xmO
      data xmO/0.03016674D0/
      double precision xrO
      data xrO/153.709333259999994D0/
      double precision xdeps0
      data xdeps0/0.001D0/
C Do the main loop for all block values
      do k = 1, nblock
C Preprocessing of the variables
      xeps = (eqps(k) - xmI(1))/xrI(1)
      if (eqpsRate(k) > xdeps0) then
        xdeps = (log(eqpsRate(k)/xdeps0) - xmI(2))/xrI(2)
      else
        xdeps = 0
        eqpsRate(k) = xdeps0
      endif
      xtemp = (tempNew(k) - xmI(3))/xrI(3)
C Hidden layer #1 - (y11 to y117)
      y11 = w1(1,1) * xeps
     + +w1(1,2) * xdeps
     + +w1(1,3) * xtemp
     + +b1(1)
      y12 = w1(2,1) * xeps
     + +w1(2,2) * xdeps
     + +w1(2,3) * xtemp
     + +b1(2)
      y13 = w1(3,1) * xeps
     + +w1(3,2) * xdeps
     + +w1(3,3) * xtemp
     + +b1(3)
      y14 = w1(4,1) * xeps
     + +w1(4,2) * xdeps
     + +w1(4,3) * xtemp
     + +b1(4)
      y15 = w1(5,1) * xeps
     + +w1(5,2) * xdeps
     + +w1(5,3) * xtemp
     + +b1(5)
      y16 = w1(6,1) * xeps
     + +w1(6,2) * xdeps
     + +w1(6,3) * xtemp
     + +b1(6)
      y17 = w1(7,1) * xeps
     + +w1(7,2) * xdeps
     + +w1(7,3) * xtemp
     + +b1(7)
      y18 = w1(8,1) * xeps
     + +w1(8,2) * xdeps
     + +w1(8,3) * xtemp
     + +b1(8)
      y19 = w1(9,1) * xeps
     + +w1(9,2) * xdeps
     + +w1(9,3) * xtemp
     + +b1(9)
      y110 = w1(10,1) * xeps
     + +w1(10,2) * xdeps
     + +w1(10,3) * xtemp
     + +b1(10)
      y111 = w1(11,1) * xeps
     + +w1(11,2) * xdeps
     + +w1(11,3) * xtemp
     + +b1(11)
      y112 = w1(12,1) * xeps
     + +w1(12,2) * xdeps
     + +w1(12,3) * xtemp
     + +b1(12)
      y113 = w1(13,1) * xeps
     + +w1(13,2) * xdeps
     + +w1(13,3) * xtemp
     + +b1(13)
      y114 = w1(14,1) * xeps
     + +w1(14,2) * xdeps
     + +w1(14,3) * xtemp
     + +b1(14)
      y115 = w1(15,1) * xeps
     + +w1(15,2) * xdeps
     + +w1(15,3) * xtemp
     + +b1(15)
      y116 = w1(16,1) * xeps
     + +w1(16,2) * xdeps
     + +w1(16,3) * xtemp
     + +b1(16)
      y117 = w1(17,1) * xeps
     + +w1(17,2) * xdeps
     + +w1(17,3) * xtemp
     + +b1(17)
C exponential activation function - (yf11 to yf117)
      yf11 = exp(y11)
      yf12 = exp(y12)
      yf13 = exp(y13)
      yf14 = exp(y14)
      yf15 = exp(y15)
      yf16 = exp(y16)
      yf17 = exp(y17)
      yf18 = exp(y18)
      yf19 = exp(y19)
      yf110 = exp(y110)
      yf111 = exp(y111)
      yf112 = exp(y112)
      yf113 = exp(y113)
      yf114 = exp(y114)
      yf115 = exp(y115)
      yf116 = exp(y116)
      yf117 = exp(y117)
C Hidden layer #2 - (y21 to y29)
      y21 = w2(1,1) * yf11
     + +w2(1,2) * yf12
     + +w2(1,3) * yf13
     + +w2(1,4) * yf14
     + +w2(1,5) * yf15
     + +w2(1,6) * yf16
     + +w2(1,7) * yf17
     + +w2(1,8) * yf18
     + +w2(1,9) * yf19
     + +w2(1,10) * yf110
     + +w2(1,11) * yf111
     + +w2(1,12) * yf112
     + +w2(1,13) * yf113
     + +w2(1,14) * yf114
     + +w2(1,15) * yf115
     + +w2(1,16) * yf116
     + +w2(1,17) * yf117
     + +b2(1)
      y22 = w2(2,1) * yf11
     + +w2(2,2) * yf12
     + +w2(2,3) * yf13
     + +w2(2,4) * yf14
     + +w2(2,5) * yf15
     + +w2(2,6) * yf16
     + +w2(2,7) * yf17
     + +w2(2,8) * yf18
     + +w2(2,9) * yf19
     + +w2(2,10) * yf110
     + +w2(2,11) * yf111
     + +w2(2,12) * yf112
     + +w2(2,13) * yf113
     + +w2(2,14) * yf114
     + +w2(2,15) * yf115
     + +w2(2,16) * yf116
     + +w2(2,17) * yf117
     + +b2(2)
      y23 = w2(3,1) * yf11
     + +w2(3,2) * yf12
     + +w2(3,3) * yf13
     + +w2(3,4) * yf14
     + +w2(3,5) * yf15
     + +w2(3,6) * yf16
     + +w2(3,7) * yf17
     + +w2(3,8) * yf18
     + +w2(3,9) * yf19
     + +w2(3,10) * yf110
     + +w2(3,11) * yf111
     + +w2(3,12) * yf112
     + +w2(3,13) * yf113
     + +w2(3,14) * yf114
     + +w2(3,15) * yf115
     + +w2(3,16) * yf116
     + +w2(3,17) * yf117
     + +b2(3)
      y24 = w2(4,1) * yf11
     + +w2(4,2) * yf12
     + +w2(4,3) * yf13
     + +w2(4,4) * yf14
     + +w2(4,5) * yf15
     + +w2(4,6) * yf16
     + +w2(4,7) * yf17
     + +w2(4,8) * yf18
     + +w2(4,9) * yf19
     + +w2(4,10) * yf110
     + +w2(4,11) * yf111
     + +w2(4,12) * yf112
     + +w2(4,13) * yf113
     + +w2(4,14) * yf114
     + +w2(4,15) * yf115
     + +w2(4,16) * yf116
     + +w2(4,17) * yf117
     + +b2(4)
      y25 = w2(5,1) * yf11
     + +w2(5,2) * yf12
     + +w2(5,3) * yf13
     + +w2(5,4) * yf14
     + +w2(5,5) * yf15
     + +w2(5,6) * yf16
     + +w2(5,7) * yf17
     + +w2(5,8) * yf18
     + +w2(5,9) * yf19
     + +w2(5,10) * yf110
     + +w2(5,11) * yf111
     + +w2(5,12) * yf112
     + +w2(5,13) * yf113
     + +w2(5,14) * yf114
     + +w2(5,15) * yf115
     + +w2(5,16) * yf116
     + +w2(5,17) * yf117
     + +b2(5)
      y26 = w2(6,1) * yf11
     + +w2(6,2) * yf12
     + +w2(6,3) * yf13
     + +w2(6,4) * yf14
     + +w2(6,5) * yf15
     + +w2(6,6) * yf16
     + +w2(6,7) * yf17
     + +w2(6,8) * yf18
     + +w2(6,9) * yf19
     + +w2(6,10) * yf110
     + +w2(6,11) * yf111
     + +w2(6,12) * yf112
     + +w2(6,13) * yf113
     + +w2(6,14) * yf114
     + +w2(6,15) * yf115
     + +w2(6,16) * yf116
     + +w2(6,17) * yf117
     + +b2(6)
      y27 = w2(7,1) * yf11
     + +w2(7,2) * yf12
     + +w2(7,3) * yf13
     + +w2(7,4) * yf14
     + +w2(7,5) * yf15
     + +w2(7,6) * yf16
     + +w2(7,7) * yf17
     + +w2(7,8) * yf18
     + +w2(7,9) * yf19
     + +w2(7,10) * yf110
     + +w2(7,11) * yf111
     + +w2(7,12) * yf112
     + +w2(7,13) * yf113
     + +w2(7,14) * yf114
     + +w2(7,15) * yf115
     + +w2(7,16) * yf116
     + +w2(7,17) * yf117
     + +b2(7)
      y28 = w2(8,1) * yf11
     + +w2(8,2) * yf12
     + +w2(8,3) * yf13
     + +w2(8,4) * yf14
     + +w2(8,5) * yf15
     + +w2(8,6) * yf16
     + +w2(8,7) * yf17
     + +w2(8,8) * yf18
     + +w2(8,9) * yf19
     + +w2(8,10) * yf110
     + +w2(8,11) * yf111
     + +w2(8,12) * yf112
     + +w2(8,13) * yf113
     + +w2(8,14) * yf114
     + +w2(8,15) * yf115
     + +w2(8,16) * yf116
     + +w2(8,17) * yf117
     + +b2(8)
      y29 = w2(9,1) * yf11
     + +w2(9,2) * yf12
     + +w2(9,3) * yf13
     + +w2(9,4) * yf14
     + +w2(9,5) * yf15
     + +w2(9,6) * yf16
     + +w2(9,7) * yf17
     + +w2(9,8) * yf18
     + +w2(9,9) * yf19
     + +w2(9,10) * yf110
     + +w2(9,11) * yf111
     + +w2(9,12) * yf112
     + +w2(9,13) * yf113
     + +w2(9,14) * yf114
     + +w2(9,15) * yf115
     + +w2(9,16) * yf116
     + +w2(9,17) * yf117
     + +b2(9)
C exponential activation function - (yf21 to yf29)
      yf21 = exp(y21)
      yf22 = exp(y22)
      yf23 = exp(y23)
      yf24 = exp(y24)
      yf25 = exp(y25)
      yf26 = exp(y26)
      yf27 = exp(y27)
      yf28 = exp(y28)
      yf29 = exp(y29)
C Derivatives terms - (xa1 to xa9) and (xb1 to xb17)
      xa1 = w3(1) * yf21
      xa2 = w3(2) * yf22
      xa3 = w3(3) * yf23
      xa4 = w3(4) * yf24
      xa5 = w3(5) * yf25
      xa6 = w3(6) * yf26
      xa7 = w3(7) * yf27
      xa8 = w3(8) * yf28
      xa9 = w3(9) * yf29
      xb1 = (w2(1,1) * xa1
     + +w2(2,1) * xa2
     + +w2(3,1) * xa3
     + +w2(4,1) * xa4
     + +w2(5,1) * xa5
     + +w2(6,1) * xa6
     + +w2(7,1) * xa7
     + +w2(8,1) * xa8
     + +w2(9,1) * xa9)
     + * yf11
      xb2 = (w2(1,2) * xa1
     + +w2(2,2) * xa2
     + +w2(3,2) * xa3
     + +w2(4,2) * xa4
     + +w2(5,2) * xa5
     + +w2(6,2) * xa6
     + +w2(7,2) * xa7
     + +w2(8,2) * xa8
     + +w2(9,2) * xa9)
     + * yf12
      xb3 = (w2(1,3) * xa1
     + +w2(2,3) * xa2
     + +w2(3,3) * xa3
     + +w2(4,3) * xa4
     + +w2(5,3) * xa5
     + +w2(6,3) * xa6
     + +w2(7,3) * xa7
     + +w2(8,3) * xa8
     + +w2(9,3) * xa9)
     + * yf13
      xb4 = (w2(1,4) * xa1
     + +w2(2,4) * xa2
     + +w2(3,4) * xa3
     + +w2(4,4) * xa4
     + +w2(5,4) * xa5
     + +w2(6,4) * xa6
     + +w2(7,4) * xa7
     + +w2(8,4) * xa8
     + +w2(9,4) * xa9)
     + * yf14
      xb5 = (w2(1,5) * xa1
     + +w2(2,5) * xa2
     + +w2(3,5) * xa3
     + +w2(4,5) * xa4
     + +w2(5,5) * xa5
     + +w2(6,5) * xa6
     + +w2(7,5) * xa7
     + +w2(8,5) * xa8
     + +w2(9,5) * xa9)
     + * yf15
      xb6 = (w2(1,6) * xa1
     + +w2(2,6) * xa2
     + +w2(3,6) * xa3
     + +w2(4,6) * xa4
     + +w2(5,6) * xa5
     + +w2(6,6) * xa6
     + +w2(7,6) * xa7
     + +w2(8,6) * xa8
     + +w2(9,6) * xa9)
     + * yf16
      xb7 = (w2(1,7) * xa1
     + +w2(2,7) * xa2
     + +w2(3,7) * xa3
     + +w2(4,7) * xa4
     + +w2(5,7) * xa5
     + +w2(6,7) * xa6
     + +w2(7,7) * xa7
     + +w2(8,7) * xa8
     + +w2(9,7) * xa9)
     + * yf17
      xb8 = (w2(1,8) * xa1
     + +w2(2,8) * xa2
     + +w2(3,8) * xa3
     + +w2(4,8) * xa4
     + +w2(5,8) * xa5
     + +w2(6,8) * xa6
     + +w2(7,8) * xa7
     + +w2(8,8) * xa8
     + +w2(9,8) * xa9)
     + * yf18
      xb9 = (w2(1,9) * xa1
     + +w2(2,9) * xa2
     + +w2(3,9) * xa3
     + +w2(4,9) * xa4
     + +w2(5,9) * xa5
     + +w2(6,9) * xa6
     + +w2(7,9) * xa7
     + +w2(8,9) * xa8
     + +w2(9,9) * xa9)
     + * yf19
      xb10 = (w2(1,10) * xa1
     + +w2(2,10) * xa2
     + +w2(3,10) * xa3
     + +w2(4,10) * xa4
     + +w2(5,10) * xa5
     + +w2(6,10) * xa6
     + +w2(7,10) * xa7
     + +w2(8,10) * xa8
     + +w2(9,10) * xa9)
     + * yf110
      xb11 = (w2(1,11) * xa1
     + +w2(2,11) * xa2
     + +w2(3,11) * xa3
     + +w2(4,11) * xa4
     + +w2(5,11) * xa5
     + +w2(6,11) * xa6
     + +w2(7,11) * xa7
     + +w2(8,11) * xa8
     + +w2(9,11) * xa9)
     + * yf111
      xb12 = (w2(1,12) * xa1
     + +w2(2,12) * xa2
     + +w2(3,12) * xa3
     + +w2(4,12) * xa4
     + +w2(5,12) * xa5
     + +w2(6,12) * xa6
     + +w2(7,12) * xa7
     + +w2(8,12) * xa8
     + +w2(9,12) * xa9)
     + * yf112
      xb13 = (w2(1,13) * xa1
     + +w2(2,13) * xa2
     + +w2(3,13) * xa3
     + +w2(4,13) * xa4
     + +w2(5,13) * xa5
     + +w2(6,13) * xa6
     + +w2(7,13) * xa7
     + +w2(8,13) * xa8
     + +w2(9,13) * xa9)
     + * yf113
      xb14 = (w2(1,14) * xa1
     + +w2(2,14) * xa2
     + +w2(3,14) * xa3
     + +w2(4,14) * xa4
     + +w2(5,14) * xa5
     + +w2(6,14) * xa6
     + +w2(7,14) * xa7
     + +w2(8,14) * xa8
     + +w2(9,14) * xa9)
     + * yf114
      xb15 = (w2(1,15) * xa1
     + +w2(2,15) * xa2
     + +w2(3,15) * xa3
     + +w2(4,15) * xa4
     + +w2(5,15) * xa5
     + +w2(6,15) * xa6
     + +w2(7,15) * xa7
     + +w2(8,15) * xa8
     + +w2(9,15) * xa9)
     + * yf115
      xb16 = (w2(1,16) * xa1
     + +w2(2,16) * xa2
     + +w2(3,16) * xa3
     + +w2(4,16) * xa4
     + +w2(5,16) * xa5
     + +w2(6,16) * xa6
     + +w2(7,16) * xa7
     + +w2(8,16) * xa8
     + +w2(9,16) * xa9)
     + * yf116
      xb17 = (w2(1,17) * xa1
     + +w2(2,17) * xa2
     + +w2(3,17) * xa3
     + +w2(4,17) * xa4
     + +w2(5,17) * xa5
     + +w2(6,17) * xa6
     + +w2(7,17) * xa7
     + +w2(8,17) * xa8
     + +w2(9,17) * xa9)
     + * yf117
C Outputs of the subroutine
      Yield(k) = xrO * (w3(1) * yf21
     + +w3(2) * yf22
     + +w3(3) * yf23
     + +w3(4) * yf24
     + +w3(5) * yf25
     + +w3(6) * yf26
     + +w3(7) * yf27
     + +w3(8) * yf28
     + +w3(9) * yf29
     + +b3)
     + +xmO
      dyieldDeqps(k,1) = xrO * (w1(1,1) * xb1
     + +w1(2,1) * xb2
     + +w1(3,1) * xb3
     + +w1(4,1) * xb4
     + +w1(5,1) * xb5
     + +w1(6,1) * xb6
     + +w1(7,1) * xb7
     + +w1(8,1) * xb8
     + +w1(9,1) * xb9
     + +w1(10,1) * xb10
     + +w1(11,1) * xb11
     + +w1(12,1) * xb12
     + +w1(13,1) * xb13
     + +w1(14,1) * xb14
     + +w1(15,1) * xb15
     + +w1(16,1) * xb16
     + +w1(17,1) * xb17) / xrI(1)
      dyieldDeqps(k,1) = xrO * (w1(1,2) * xb1
     + +w1(2,2) * xb2
     + +w1(3,2) * xb3
     + +w1(4,2) * xb4
     + +w1(5,2) * xb5
     + +w1(6,2) * xb6
     + +w1(7,2) * xb7
     + +w1(8,2) * xb8
     + +w1(9,2) * xb9
     + +w1(10,2) * xb10
     + +w1(11,2) * xb11
     + +w1(12,2) * xb12
     + +w1(13,2) * xb13
     + +w1(14,2) * xb14
     + +w1(15,2) * xb15
     + +w1(16,2) * xb16
     + +w1(17,2) * xb17)
     + /(xrI(2)*eqpsRate(k))
      dyieldDtemp(k) = xrO * (w1(1,3) * xb1
     + +w1(2,3) * xb2
     + +w1(3,3) * xb3
     + +w1(4,3) * xb4
     + +w1(5,3) * xb5
     + +w1(6,3) * xb6
     + +w1(7,3) * xb7
     + +w1(8,3) * xb8
     + +w1(9,3) * xb9
     + +w1(10,3) * xb10
     + +w1(11,3) * xb11
     + +w1(12,3) * xb12
     + +w1(13,3) * xb13
     + +w1(14,3) * xb14
     + +w1(15,3) * xb15
     + +w1(16,3) * xb16
     + +w1(17,3) * xb17) / xrI(3)
C Store the eqpsRate into stateNew variable 1
      stateNew(k,1) = eqpsRate(k)
      end do
C Return from the VUHARD subroutine
      return
      end
