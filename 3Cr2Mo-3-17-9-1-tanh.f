C **********************************************************************
C Function to compute the ANN : 3Cr2Mo-3-17-9-1-tanh yield stress
C **********************************************************************
      subroutine vuhard (
C Read only -
     +  nblock, nElement, nIntPt, nLayer, nSecPt, lAnneal, stepTime,
     +  totalTime, dt, cmname, nstatev, nfieldv, nprops, props,
     +  tempOld, tempNew, fieldOld, fieldNew, stateOld, eqps, eqpsRate,
C Write only -
     +  yield, dyieldDtemp, dyieldDeqps, stateNew)
C
      include 'vaba_param.inc'
C
      dimension nElement(nblock), props(nprops), tempOld(nblock),
     +  fieldOld(nblock,nfieldv), stateOld(nblock,nstatev),
     +  tempNew(nblock), fieldNew(nblock,nfieldv), eqps(nblock),
     +  eqpsRate(nblock), yield(nblock), dyieldDtemp(nblock),
     +  dyieldDeqps(nblock,2), stateNew(nblock,nstatev)
C
      character*80 cmname
C Block of Data
      double precision w1(17, 3)
      data w1/-0.0002693064732598D0,
     + 0.5615033168192377D0,
     + 1.8089847802466912D0,
     + -0.7382387990808568D0,
     + -3.6824973804943917D0,
     + -203.2541890694253652D0,
     + -2.1776537067816868D0,
     + 0.0009649405027278D0,
     + -4.7542338485726079D0,
     + -0.5194620054288296D0,
     + -4.2290606219760747D0,
     + 5.9202413480301255D0,
     + 8.7572101606020745D0,
     + 1.6256916890976703D0,
     + 0.0309254654295569D0,
     + -0.2262444964241162D0,
     + 1.1519404894775449D0,
     + -0.0001364043021133D0,
     + -3.1508373710593922D0,
     + -8.4246474159950431D0,
     + -3.8658255766486547D0,
     + -2.3443427376777688D0,
     + 0.4287180554217957D0,
     + -1.5727150292128675D0,
     + -0.0010348061630803D0,
     + -4.8667203669925909D0,
     + 1.9310058955921667D0,
     + -0.2050296695992611D0,
     + -7.612306034051235D0,
     + -2.4335943252179089D0,
     + 1.3032379123074975D0,
     + -1.3459627708674666D0,
     + -2.526983261252612D0,
     + 3.677490749050409D0,
     + -0.0000235698479949D0,
     + 0.3540252474046006D0,
     + -0.3623745956271721D0,
     + 2.0835581460503527D0,
     + 3.9326940289428798D0,
     + -0.345946308504674D0,
     + -6.577487344409028D0,
     + 0.0002348528271768D0,
     + -0.1071196414244214D0,
     + -1.7992082669384675D0,
     + -0.1017371139151366D0,
     + 0.4614969926489009D0,
     + 1.0728275788054891D0,
     + -0.543958486346665D0,
     + 2.4749464823817866D0,
     + 3.0612265508102574D0,
     + 4.9612655907368204D0/
      double precision b1(17)
      data b1/-0.0001440303149567D0,
     + 0.9529630458542186D0,
     + 5.6607812430722637D0,
     + 2.8736495643799129D0,
     + 0.5920575224994954D0,
     + -0.3108045811302256D0,
     + 1.6075250445368015D0,
     + -0.0000289504861594D0,
     + 0.8848533663637176D0,
     + -0.1936993007951763D0,
     + 0.2318840523862113D0,
     + -0.4215460714862581D0,
     + 0.4445106075246254D0,
     + -1.8901597984012792D0,
     + -2.1237840694102235D0,
     + 2.3387439288928449D0,
     + -4.9827279883037408D0/
      double precision w2(9, 17)
      data w2/0.0003573425644669D0,
     + 0.0000875685207867D0,
     + -0.0000670399122225D0,
     + 0.0002199606439097D0,
     + -0.000507756789045D0,
     + 0.0009041137317441D0,
     + -0.0003503411496694D0,
     + 0.0097400476775581D0,
     + -0.0004933669843068D0,
     + 0.639419583623276D0,
     + 1.4280062531491602D0,
     + -2.7330623988856906D0,
     + 0.2577439706758485D0,
     + 2.5140820298662372D0,
     + 0.0041984546952601D0,
     + 1.0257149750733945D0,
     + -1.9674495764926694D0,
     + 2.4094186015125003D0,
     + 0.1358588258978015D0,
     + 2.5327010128421108D0,
     + 1.0161286163703391D0,
     + 0.0346805243350956D0,
     + -0.314320047585072D0,
     + 0.0034931562760184D0,
     + 1.8323678704689668D0,
     + -1.6400356999029655D0,
     + -0.6803179141519954D0,
     + -0.1531642830538312D0,
     + -0.7399801945649432D0,
     + -1.5241722590626932D0,
     + -0.0452113115620292D0,
     + 0.0926853249814615D0,
     + 0.0078500448126047D0,
     + 1.9167477873000689D0,
     + 3.664288083469549D0,
     + -1.6687864949966089D0,
     + 0.185721761247699D0,
     + -7.2116992066184249D0,
     + 0.6180281623987538D0,
     + -0.0230936236982801D0,
     + -0.1006099269583664D0,
     + 0.0107618405010458D0,
     + 0.0933997097497805D0,
     + -1.8551682418152655D0,
     + -0.2474119482786632D0,
     + 0.5000523440010174D0,
     + -14.5810488469741397D0,
     + 0.8177871266022833D0,
     + 0.3639250273506798D0,
     + -0.8831144040092821D0,
     + -0.0261407579309143D0,
     + 3.0318981688187758D0,
     + 1.9335434603669992D0,
     + 0.5171718195129444D0,
     + 0.0400102504097475D0,
     + -3.7898090410243785D0,
     + 1.3227624291760109D0,
     + -0.0080847697074879D0,
     + -0.175387503781325D0,
     + 0.0099025592378384D0,
     + 0.7261585897332636D0,
     + 3.2322270638831228D0,
     + -0.2544912361841495D0,
     + -0.0015655247011586D0,
     + -0.015858722061768D0,
     + 0.0015378579959765D0,
     + -0.0000411072216772D0,
     + 0.0011484744339871D0,
     + -0.0055477870690049D0,
     + 0.0003259219466867D0,
     + 0.0057335857647074D0,
     + 0.0040863471454101D0,
     + -0.0451091986341011D0,
     + 2.4421074854811491D0,
     + 1.6545291372276976D0,
     + -0.090027470770837D0,
     + -2.1617945818824902D0,
     + -0.0150060122909496D0,
     + -0.3847727642772614D0,
     + -3.367972702999928D0,
     + 1.8452518150941832D0,
     + -0.6353577192863868D0,
     + -1.1087932068231239D0,
     + -1.5611179290566857D0,
     + -0.4645974236473165D0,
     + -0.7935515754503775D0,
     + 0.0130216264158726D0,
     + 1.9466427005433384D0,
     + -9.1285944824444307D0,
     + -1.5388835568629435D0,
     + 0.6568063484260793D0,
     + 3.0571362840261456D0,
     + -2.0478846640941284D0,
     + 0.7365440612842576D0,
     + 5.4954768010576851D0,
     + 0.0196854808256447D0,
     + -0.1278265271308218D0,
     + 3.0169344160402578D0,
     + -7.618658658876055D0,
     + -0.0165598170177553D0,
     + 1.86109050080622D0,
     + -0.2708493664517111D0,
     + 0.0686571814742981D0,
     + 2.9710634187419158D0,
     + 0.008060165037532D0,
     + -1.5157560681032851D0,
     + -0.0661324934628861D0,
     + -0.3492692531115812D0,
     + -1.0343347048479594D0,
     + 0.7331408530156301D0,
     + 1.4841486957180203D0,
     + 0.060929318754698D0,
     + -3.3734673290574997D0,
     + -0.0018567676809916D0,
     + -0.4640125664217007D0,
     + 0.3562603094813974D0,
     + -2.4773755026645405D0,
     + -0.6744108498215824D0,
     + -3.5334207432471163D0,
     + -0.0162195697131156D0,
     + -0.4495456548883503D0,
     + 0.0051299577371712D0,
     + 0.0320699466909359D0,
     + -0.0881136732681129D0,
     + -4.840520053697654D0,
     + 0.9820417921186549D0,
     + -0.0304798726300366D0,
     + -4.8691030134272255D0,
     + -0.2699813360877843D0,
     + 0.4491473802787463D0,
     + -0.2182177349969918D0,
     + -0.0110055070065265D0,
     + -0.9304675214120712D0,
     + -0.9289720245688229D0,
     + 0.5704631731042014D0,
     + -0.8553000910498302D0,
     + -2.2659564456691421D0,
     + -2.0770989418498007D0,
     + 0.3635515392571351D0,
     + -0.3304739865271801D0,
     + 0.0109318260232372D0,
     + 0.798808096169186D0,
     + -5.3787042085972017D0,
     + 1.8395062097731427D0,
     + 0.1478076714037288D0,
     + 4.9563082447309954D0,
     + 1.0879889271340379D0,
     + 0.0223607965492418D0,
     + 0.0754604876841376D0,
     + 0.0025295946723344D0,
     + 0.1751795085607665D0,
     + -0.6769296708549923D0,
     + -0.104433822159003D0/
      double precision b2(9)
      data b2/0.2894779644477357D0,
     + -0.0424987664949351D0,
     + -1.9174364854708339D0,
     + 1.134099827430203D0,
     + -1.1528812694017716D0,
     + -0.0149346997879652D0,
     + 2.8846693285917211D0,
     + -0.1104387139673576D0,
     + -2.8591065927503654D0/
      double precision w3(9)
      data w3/-0.1235331410951529D0,
     + 0.0918765008265095D0,
     + 0.0956130237803341D0,
     + -0.3283574068473257D0,
     + -0.2668573656984283D0,
     + -0.0010228867134935D0,
     + -0.0456216971457142D0,
     + 0.0091540729460433D0,
     + -0.0303782187701022D0/
      double precision b3
      data b3/0.1452417414139052D0/
      double precision xmI(3)
      data xmI/0D0,
     + 0D0,
     + 1050D0/
      double precision xrI(3)
      data xrI/0.7D0,
     + 8.5171931914162382D0,
     + 200D0/
      double precision xmO
      data xmO/0.03016674D0/
      double precision xrO
      data xrO/153.709333259999994D0/
      double precision xdeps0
      data xdeps0/0.001D0/
C Do the main loop for all block values
      do k = 1, nblock
C Preprocessing of the variables
      xeps = (eqps(k) - xmI(1))/xrI(1)
      if (eqpsRate(k) > xdeps0) then
        xdeps = (log(eqpsRate(k)/xdeps0) - xmI(2))/xrI(2)
      else
        xdeps = 0
        eqpsRate(k) = xdeps0
      endif
      xtemp = (tempNew(k) - xmI(3))/xrI(3)
C Hidden layer #1 - (y11 to y117)
      y11 = w1(1,1) * xeps
     + +w1(1,2) * xdeps
     + +w1(1,3) * xtemp
     + +b1(1)
      y12 = w1(2,1) * xeps
     + +w1(2,2) * xdeps
     + +w1(2,3) * xtemp
     + +b1(2)
      y13 = w1(3,1) * xeps
     + +w1(3,2) * xdeps
     + +w1(3,3) * xtemp
     + +b1(3)
      y14 = w1(4,1) * xeps
     + +w1(4,2) * xdeps
     + +w1(4,3) * xtemp
     + +b1(4)
      y15 = w1(5,1) * xeps
     + +w1(5,2) * xdeps
     + +w1(5,3) * xtemp
     + +b1(5)
      y16 = w1(6,1) * xeps
     + +w1(6,2) * xdeps
     + +w1(6,3) * xtemp
     + +b1(6)
      y17 = w1(7,1) * xeps
     + +w1(7,2) * xdeps
     + +w1(7,3) * xtemp
     + +b1(7)
      y18 = w1(8,1) * xeps
     + +w1(8,2) * xdeps
     + +w1(8,3) * xtemp
     + +b1(8)
      y19 = w1(9,1) * xeps
     + +w1(9,2) * xdeps
     + +w1(9,3) * xtemp
     + +b1(9)
      y110 = w1(10,1) * xeps
     + +w1(10,2) * xdeps
     + +w1(10,3) * xtemp
     + +b1(10)
      y111 = w1(11,1) * xeps
     + +w1(11,2) * xdeps
     + +w1(11,3) * xtemp
     + +b1(11)
      y112 = w1(12,1) * xeps
     + +w1(12,2) * xdeps
     + +w1(12,3) * xtemp
     + +b1(12)
      y113 = w1(13,1) * xeps
     + +w1(13,2) * xdeps
     + +w1(13,3) * xtemp
     + +b1(13)
      y114 = w1(14,1) * xeps
     + +w1(14,2) * xdeps
     + +w1(14,3) * xtemp
     + +b1(14)
      y115 = w1(15,1) * xeps
     + +w1(15,2) * xdeps
     + +w1(15,3) * xtemp
     + +b1(15)
      y116 = w1(16,1) * xeps
     + +w1(16,2) * xdeps
     + +w1(16,3) * xtemp
     + +b1(16)
      y117 = w1(17,1) * xeps
     + +w1(17,2) * xdeps
     + +w1(17,3) * xtemp
     + +b1(17)
C tanh activation function - (yf11 to yf117)
      yf11 = tanh(y11)
      yf12 = tanh(y12)
      yf13 = tanh(y13)
      yf14 = tanh(y14)
      yf15 = tanh(y15)
      yf16 = tanh(y16)
      yf17 = tanh(y17)
      yf18 = tanh(y18)
      yf19 = tanh(y19)
      yf110 = tanh(y110)
      yf111 = tanh(y111)
      yf112 = tanh(y112)
      yf113 = tanh(y113)
      yf114 = tanh(y114)
      yf115 = tanh(y115)
      yf116 = tanh(y116)
      yf117 = tanh(y117)
C Hidden layer #2 - (y21 to y29)
      y21 = w2(1,1) * yf11
     + +w2(1,2) * yf12
     + +w2(1,3) * yf13
     + +w2(1,4) * yf14
     + +w2(1,5) * yf15
     + +w2(1,6) * yf16
     + +w2(1,7) * yf17
     + +w2(1,8) * yf18
     + +w2(1,9) * yf19
     + +w2(1,10) * yf110
     + +w2(1,11) * yf111
     + +w2(1,12) * yf112
     + +w2(1,13) * yf113
     + +w2(1,14) * yf114
     + +w2(1,15) * yf115
     + +w2(1,16) * yf116
     + +w2(1,17) * yf117
     + +b2(1)
      y22 = w2(2,1) * yf11
     + +w2(2,2) * yf12
     + +w2(2,3) * yf13
     + +w2(2,4) * yf14
     + +w2(2,5) * yf15
     + +w2(2,6) * yf16
     + +w2(2,7) * yf17
     + +w2(2,8) * yf18
     + +w2(2,9) * yf19
     + +w2(2,10) * yf110
     + +w2(2,11) * yf111
     + +w2(2,12) * yf112
     + +w2(2,13) * yf113
     + +w2(2,14) * yf114
     + +w2(2,15) * yf115
     + +w2(2,16) * yf116
     + +w2(2,17) * yf117
     + +b2(2)
      y23 = w2(3,1) * yf11
     + +w2(3,2) * yf12
     + +w2(3,3) * yf13
     + +w2(3,4) * yf14
     + +w2(3,5) * yf15
     + +w2(3,6) * yf16
     + +w2(3,7) * yf17
     + +w2(3,8) * yf18
     + +w2(3,9) * yf19
     + +w2(3,10) * yf110
     + +w2(3,11) * yf111
     + +w2(3,12) * yf112
     + +w2(3,13) * yf113
     + +w2(3,14) * yf114
     + +w2(3,15) * yf115
     + +w2(3,16) * yf116
     + +w2(3,17) * yf117
     + +b2(3)
      y24 = w2(4,1) * yf11
     + +w2(4,2) * yf12
     + +w2(4,3) * yf13
     + +w2(4,4) * yf14
     + +w2(4,5) * yf15
     + +w2(4,6) * yf16
     + +w2(4,7) * yf17
     + +w2(4,8) * yf18
     + +w2(4,9) * yf19
     + +w2(4,10) * yf110
     + +w2(4,11) * yf111
     + +w2(4,12) * yf112
     + +w2(4,13) * yf113
     + +w2(4,14) * yf114
     + +w2(4,15) * yf115
     + +w2(4,16) * yf116
     + +w2(4,17) * yf117
     + +b2(4)
      y25 = w2(5,1) * yf11
     + +w2(5,2) * yf12
     + +w2(5,3) * yf13
     + +w2(5,4) * yf14
     + +w2(5,5) * yf15
     + +w2(5,6) * yf16
     + +w2(5,7) * yf17
     + +w2(5,8) * yf18
     + +w2(5,9) * yf19
     + +w2(5,10) * yf110
     + +w2(5,11) * yf111
     + +w2(5,12) * yf112
     + +w2(5,13) * yf113
     + +w2(5,14) * yf114
     + +w2(5,15) * yf115
     + +w2(5,16) * yf116
     + +w2(5,17) * yf117
     + +b2(5)
      y26 = w2(6,1) * yf11
     + +w2(6,2) * yf12
     + +w2(6,3) * yf13
     + +w2(6,4) * yf14
     + +w2(6,5) * yf15
     + +w2(6,6) * yf16
     + +w2(6,7) * yf17
     + +w2(6,8) * yf18
     + +w2(6,9) * yf19
     + +w2(6,10) * yf110
     + +w2(6,11) * yf111
     + +w2(6,12) * yf112
     + +w2(6,13) * yf113
     + +w2(6,14) * yf114
     + +w2(6,15) * yf115
     + +w2(6,16) * yf116
     + +w2(6,17) * yf117
     + +b2(6)
      y27 = w2(7,1) * yf11
     + +w2(7,2) * yf12
     + +w2(7,3) * yf13
     + +w2(7,4) * yf14
     + +w2(7,5) * yf15
     + +w2(7,6) * yf16
     + +w2(7,7) * yf17
     + +w2(7,8) * yf18
     + +w2(7,9) * yf19
     + +w2(7,10) * yf110
     + +w2(7,11) * yf111
     + +w2(7,12) * yf112
     + +w2(7,13) * yf113
     + +w2(7,14) * yf114
     + +w2(7,15) * yf115
     + +w2(7,16) * yf116
     + +w2(7,17) * yf117
     + +b2(7)
      y28 = w2(8,1) * yf11
     + +w2(8,2) * yf12
     + +w2(8,3) * yf13
     + +w2(8,4) * yf14
     + +w2(8,5) * yf15
     + +w2(8,6) * yf16
     + +w2(8,7) * yf17
     + +w2(8,8) * yf18
     + +w2(8,9) * yf19
     + +w2(8,10) * yf110
     + +w2(8,11) * yf111
     + +w2(8,12) * yf112
     + +w2(8,13) * yf113
     + +w2(8,14) * yf114
     + +w2(8,15) * yf115
     + +w2(8,16) * yf116
     + +w2(8,17) * yf117
     + +b2(8)
      y29 = w2(9,1) * yf11
     + +w2(9,2) * yf12
     + +w2(9,3) * yf13
     + +w2(9,4) * yf14
     + +w2(9,5) * yf15
     + +w2(9,6) * yf16
     + +w2(9,7) * yf17
     + +w2(9,8) * yf18
     + +w2(9,9) * yf19
     + +w2(9,10) * yf110
     + +w2(9,11) * yf111
     + +w2(9,12) * yf112
     + +w2(9,13) * yf113
     + +w2(9,14) * yf114
     + +w2(9,15) * yf115
     + +w2(9,16) * yf116
     + +w2(9,17) * yf117
     + +b2(9)
C tanh activation function - (yf21 to yf29)
      yf21 = tanh(y21)
      yf22 = tanh(y22)
      yf23 = tanh(y23)
      yf24 = tanh(y24)
      yf25 = tanh(y25)
      yf26 = tanh(y26)
      yf27 = tanh(y27)
      yf28 = tanh(y28)
      yf29 = tanh(y29)
C Derivatives terms - (xa1 to xa9) and (xb1 to xb17)
      xa1 = w3(1) * (1 - yf21*yf21)
      xa2 = w3(2) * (1 - yf22*yf22)
      xa3 = w3(3) * (1 - yf23*yf23)
      xa4 = w3(4) * (1 - yf24*yf24)
      xa5 = w3(5) * (1 - yf25*yf25)
      xa6 = w3(6) * (1 - yf26*yf26)
      xa7 = w3(7) * (1 - yf27*yf27)
      xa8 = w3(8) * (1 - yf28*yf28)
      xa9 = w3(9) * (1 - yf29*yf29)
      xb1 = (w2(1,1) * xa1
     + +w2(2,1) * xa2
     + +w2(3,1) * xa3
     + +w2(4,1) * xa4
     + +w2(5,1) * xa5
     + +w2(6,1) * xa6
     + +w2(7,1) * xa7
     + +w2(8,1) * xa8
     + +w2(9,1) * xa9)
     + * (1 - yf11*yf11)
      xb2 = (w2(1,2) * xa1
     + +w2(2,2) * xa2
     + +w2(3,2) * xa3
     + +w2(4,2) * xa4
     + +w2(5,2) * xa5
     + +w2(6,2) * xa6
     + +w2(7,2) * xa7
     + +w2(8,2) * xa8
     + +w2(9,2) * xa9)
     + * (1 - yf12*yf12)
      xb3 = (w2(1,3) * xa1
     + +w2(2,3) * xa2
     + +w2(3,3) * xa3
     + +w2(4,3) * xa4
     + +w2(5,3) * xa5
     + +w2(6,3) * xa6
     + +w2(7,3) * xa7
     + +w2(8,3) * xa8
     + +w2(9,3) * xa9)
     + * (1 - yf13*yf13)
      xb4 = (w2(1,4) * xa1
     + +w2(2,4) * xa2
     + +w2(3,4) * xa3
     + +w2(4,4) * xa4
     + +w2(5,4) * xa5
     + +w2(6,4) * xa6
     + +w2(7,4) * xa7
     + +w2(8,4) * xa8
     + +w2(9,4) * xa9)
     + * (1 - yf14*yf14)
      xb5 = (w2(1,5) * xa1
     + +w2(2,5) * xa2
     + +w2(3,5) * xa3
     + +w2(4,5) * xa4
     + +w2(5,5) * xa5
     + +w2(6,5) * xa6
     + +w2(7,5) * xa7
     + +w2(8,5) * xa8
     + +w2(9,5) * xa9)
     + * (1 - yf15*yf15)
      xb6 = (w2(1,6) * xa1
     + +w2(2,6) * xa2
     + +w2(3,6) * xa3
     + +w2(4,6) * xa4
     + +w2(5,6) * xa5
     + +w2(6,6) * xa6
     + +w2(7,6) * xa7
     + +w2(8,6) * xa8
     + +w2(9,6) * xa9)
     + * (1 - yf16*yf16)
      xb7 = (w2(1,7) * xa1
     + +w2(2,7) * xa2
     + +w2(3,7) * xa3
     + +w2(4,7) * xa4
     + +w2(5,7) * xa5
     + +w2(6,7) * xa6
     + +w2(7,7) * xa7
     + +w2(8,7) * xa8
     + +w2(9,7) * xa9)
     + * (1 - yf17*yf17)
      xb8 = (w2(1,8) * xa1
     + +w2(2,8) * xa2
     + +w2(3,8) * xa3
     + +w2(4,8) * xa4
     + +w2(5,8) * xa5
     + +w2(6,8) * xa6
     + +w2(7,8) * xa7
     + +w2(8,8) * xa8
     + +w2(9,8) * xa9)
     + * (1 - yf18*yf18)
      xb9 = (w2(1,9) * xa1
     + +w2(2,9) * xa2
     + +w2(3,9) * xa3
     + +w2(4,9) * xa4
     + +w2(5,9) * xa5
     + +w2(6,9) * xa6
     + +w2(7,9) * xa7
     + +w2(8,9) * xa8
     + +w2(9,9) * xa9)
     + * (1 - yf19*yf19)
      xb10 = (w2(1,10) * xa1
     + +w2(2,10) * xa2
     + +w2(3,10) * xa3
     + +w2(4,10) * xa4
     + +w2(5,10) * xa5
     + +w2(6,10) * xa6
     + +w2(7,10) * xa7
     + +w2(8,10) * xa8
     + +w2(9,10) * xa9)
     + * (1 - yf110*yf110)
      xb11 = (w2(1,11) * xa1
     + +w2(2,11) * xa2
     + +w2(3,11) * xa3
     + +w2(4,11) * xa4
     + +w2(5,11) * xa5
     + +w2(6,11) * xa6
     + +w2(7,11) * xa7
     + +w2(8,11) * xa8
     + +w2(9,11) * xa9)
     + * (1 - yf111*yf111)
      xb12 = (w2(1,12) * xa1
     + +w2(2,12) * xa2
     + +w2(3,12) * xa3
     + +w2(4,12) * xa4
     + +w2(5,12) * xa5
     + +w2(6,12) * xa6
     + +w2(7,12) * xa7
     + +w2(8,12) * xa8
     + +w2(9,12) * xa9)
     + * (1 - yf112*yf112)
      xb13 = (w2(1,13) * xa1
     + +w2(2,13) * xa2
     + +w2(3,13) * xa3
     + +w2(4,13) * xa4
     + +w2(5,13) * xa5
     + +w2(6,13) * xa6
     + +w2(7,13) * xa7
     + +w2(8,13) * xa8
     + +w2(9,13) * xa9)
     + * (1 - yf113*yf113)
      xb14 = (w2(1,14) * xa1
     + +w2(2,14) * xa2
     + +w2(3,14) * xa3
     + +w2(4,14) * xa4
     + +w2(5,14) * xa5
     + +w2(6,14) * xa6
     + +w2(7,14) * xa7
     + +w2(8,14) * xa8
     + +w2(9,14) * xa9)
     + * (1 - yf114*yf114)
      xb15 = (w2(1,15) * xa1
     + +w2(2,15) * xa2
     + +w2(3,15) * xa3
     + +w2(4,15) * xa4
     + +w2(5,15) * xa5
     + +w2(6,15) * xa6
     + +w2(7,15) * xa7
     + +w2(8,15) * xa8
     + +w2(9,15) * xa9)
     + * (1 - yf115*yf115)
      xb16 = (w2(1,16) * xa1
     + +w2(2,16) * xa2
     + +w2(3,16) * xa3
     + +w2(4,16) * xa4
     + +w2(5,16) * xa5
     + +w2(6,16) * xa6
     + +w2(7,16) * xa7
     + +w2(8,16) * xa8
     + +w2(9,16) * xa9)
     + * (1 - yf116*yf116)
      xb17 = (w2(1,17) * xa1
     + +w2(2,17) * xa2
     + +w2(3,17) * xa3
     + +w2(4,17) * xa4
     + +w2(5,17) * xa5
     + +w2(6,17) * xa6
     + +w2(7,17) * xa7
     + +w2(8,17) * xa8
     + +w2(9,17) * xa9)
     + * (1 - yf117*yf117)
C Outputs of the subroutine
      Yield(k) = xrO * (w3(1) * yf21
     + +w3(2) * yf22
     + +w3(3) * yf23
     + +w3(4) * yf24
     + +w3(5) * yf25
     + +w3(6) * yf26
     + +w3(7) * yf27
     + +w3(8) * yf28
     + +w3(9) * yf29
     + +b3)
     + +xmO
      dyieldDeqps(k,1) = xrO * (w1(1,1) * xb1
     + +w1(2,1) * xb2
     + +w1(3,1) * xb3
     + +w1(4,1) * xb4
     + +w1(5,1) * xb5
     + +w1(6,1) * xb6
     + +w1(7,1) * xb7
     + +w1(8,1) * xb8
     + +w1(9,1) * xb9
     + +w1(10,1) * xb10
     + +w1(11,1) * xb11
     + +w1(12,1) * xb12
     + +w1(13,1) * xb13
     + +w1(14,1) * xb14
     + +w1(15,1) * xb15
     + +w1(16,1) * xb16
     + +w1(17,1) * xb17) / xrI(1)
      dyieldDeqps(k,2) = xrO * (w1(1,2) * xb1
     + +w1(2,2) * xb2
     + +w1(3,2) * xb3
     + +w1(4,2) * xb4
     + +w1(5,2) * xb5
     + +w1(6,2) * xb6
     + +w1(7,2) * xb7
     + +w1(8,2) * xb8
     + +w1(9,2) * xb9
     + +w1(10,2) * xb10
     + +w1(11,2) * xb11
     + +w1(12,2) * xb12
     + +w1(13,2) * xb13
     + +w1(14,2) * xb14
     + +w1(15,2) * xb15
     + +w1(16,2) * xb16
     + +w1(17,2) * xb17)
     + /(xrI(2)*eqpsRate(k))
      dyieldDtemp(k) = xrO * (w1(1,3) * xb1
     + +w1(2,3) * xb2
     + +w1(3,3) * xb3
     + +w1(4,3) * xb4
     + +w1(5,3) * xb5
     + +w1(6,3) * xb6
     + +w1(7,3) * xb7
     + +w1(8,3) * xb8
     + +w1(9,3) * xb9
     + +w1(10,3) * xb10
     + +w1(11,3) * xb11
     + +w1(12,3) * xb12
     + +w1(13,3) * xb13
     + +w1(14,3) * xb14
     + +w1(15,3) * xb15
     + +w1(16,3) * xb16
     + +w1(17,3) * xb17) / xrI(3)
C Store the eqpsRate into stateNew variable 1
      stateNew(k,1) = eqpsRate(k)
      end do
C Return from the VUHARD subroutine
      return
      end
